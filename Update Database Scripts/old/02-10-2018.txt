DROP FUNCTION acc.fnc_chart_insert(character varying, text, text, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, text, boolean, timestamp without time zone, character varying, character varying);
DROP FUNCTION acc.fnc_chart_delete(character varying, character varying, character varying);
DROP FUNCTION acc.fnc_chart_update(character varying, text, text, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, text, boolean, timestamp without time zone, character varying, character varying);
DROP VIEW acc.viw_repjor;
DROP VIEW acc.viw_st;
DROP VIEW acc.viw_tb;
DROP FUNCTION acc.fnc_jor_delete(character varying, character varying, character varying);
DROP FUNCTION acc.fnc_jor_insert(character varying, character varying, numeric, text, text, character varying, character varying, character varying, character varying, character varying, timestamp without time zone, character varying, json);
DROP FUNCTION acc.fnc_jor_select(character varying, integer, character varying, character varying, text);
DROP FUNCTION acc.fnc_jor_update(character varying, character varying, numeric, text, text, character varying, character varying, character varying, character varying, character varying, timestamp without time zone, character varying, json);
DROP VIEW acc.viw_jor_select;

alter table acc.tbl_jor drop CONSTRAINT jor_pkey;
ALTER TABLE acc.tbl_jor ADD PRIMARY KEY (id, company_id);
  
ALTER TABLE acc.tbl_jord RENAME account_id TO chart_id;
alter table acc.tbl_jord alter column doctype_id type smallint using cast(doctype_id as smallint); 

ALTER TABLE acc.tbl_jord ADD	FOREIGN KEY (chart_id,company_id) REFERENCES acc.tbl_chart (id, company_id);
ALTER TABLE acc.tbl_jord ADD	FOREIGN KEY (jor_id,company_id) REFERENCES acc.tbl_jor (id, company_id);
ALTER TABLE acc.tbl_jord ADD	FOREIGN KEY (doctype_id) REFERENCES grl.tbl_doctype(id);
ALTER TABLE acc.tbl_jord ADD	FOREIGN KEY (currency_id) REFERENCES grl.tbl_currencies(id);



-- FUNCTION: acc.fnc_chart_insert(character varying, text, text, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, text, boolean, timestamp without time zone, character varying, character varying)

-- DROP FUNCTION acc.fnc_chart_insert(character varying, text, text, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, text, boolean, timestamp without time zone, character varying, character varying);






CREATE OR REPLACE FUNCTION acc.fnc_chart_insert(
	in_id character varying,
	in_aname text,
	in_ename text,
	in_menue_id character varying,
	in_side_id character varying,
	in_ccrelation_id character varying,
	in_cc1_id character varying,
	in_cc2_id character varying,
	in_property_id character varying,
	in_company_id character varying,
	in_branch_id character varying,
	in_notes text,
	in_stop boolean,
	in_activetime timestamp without time zone,
	in_parent_id character varying,
	in_user_id character varying)
    RETURNS SETOF acc.tbl_chart 
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
    ROWS 1000
AS $BODY$

declare 
	on_sequ int;
	on_xseq text;
	on_lvl smallint;
	on_lvlnu smallint;
	on_servertime timestamp; 
	on_audit_id bigint;
--------------------------------------
	ex_id integer;
	ex_sqlstate text;
	ex_colname text; 
	ex_constraintname text; 
	ex_datatype text; 
	ex_msgtext text; 
	ex_tablename text; 
	ex_schemaname text; 
	ex_details text; 
	ex_hint text; 
	ex_context text; 
BEGIN
	DROP TABLE IF EXISTS temp_EX;
	CREATE TEMP TABLE temp_EX as SELECT * from acc.tbl_chart where id = '0';
	
	ex_id = (select(select max(id) from grl.tbl_ex) + 1); if ex_id is null then ex_id = 1; end if;
	on_audit_id = (select(select max(id) from grl.tbl_audit) + 1); if on_audit_id is null then on_audit_id = 1; end if;	
	on_servertime = (select(current_timestamp));
	on_lvl = (select acc.sysfnc_chartlevel(in_parent_id, in_company_id));
	on_sequ = (select acc.sysfnc_chartsequ(on_lvl, in_parent_id, in_company_id));	
	on_lvlnu = (select nu from grl.tbl_lvlnuset where doctypeid = 1 and lvlnu = on_lvl);
	
	IF (length(on_sequ::text) > on_lvlnu)  
	THEN INSERT INTO temp_EX(notes)VALUES('PostgreSQL'||','||'1' ||','|| ex_id ||',' || ex_msgtext || ',' || ex_context); 
	----------------------------------------------------------------------------------------------------------------------------INSERT INTO ex
	INSERT INTO grl.tbl_ex(
		id, sqlstate, colname, constraintname, datatype, msgtext, tablename, schemaname, details, hint, context, extime, company_id, branche_id, store_id, user_id, eventtype_id, doc_id)
		VALUES(ex_id, ex_sqlstate, ex_colname, ex_constraintname, ex_datatype, ex_msgtext, ex_tablename, ex_schemaname, ex_details, ex_hint, ex_context, on_servertime, in_company_id, in_branch_id, null, in_user_id, 21, in_id);
	RollBack; 
	return QUERY select * from temp_EX;  
	END IF;
	
	in_id = (select cast(on_sequ as character varying));
	on_lvlnu = (select (on_lvlnu - length(on_sequ::text)));
					
	WHILE (on_lvlnu > 0)
		loop
			in_id = (select concat('0',in_id));
			on_lvlnu = (select (on_lvlnu - 1));
		end loop;	
					
	IF (in_parent_id IS NULL)
		THEN in_id = (select in_id);					
	Else in_id =  (select concat(in_parent_id, in_id));
	END IF;
	
	in_aname = (select case when (in_aname IS NULL OR in_aname = '') THEN in_ename else in_aname end);
	in_ename = (select case when (in_ename IS NULL OR in_ename = '') THEN in_aname else in_ename end);

IF (select property_id from acc.tbl_chart where acc.tbl_chart.id = in_parent_id) = '1' --if customer
THEN

INSERT INTO acc.tbl_cust
           (id
           ,aname
		   ,ename
           )
     VALUES
           (chartID
           ,in_aname
		   ,in_ename
           );
End IF;

IF (select property_id from acc.tbl_chart where acc.tbl_chart.id = in_parent_id) = '2' -- if vendor
THEN

INSERT INTO acc.tbl_ven
           (id
           ,aname
		   ,ename
           )
     VALUES
           (chartID
           ,in_aname
		   ,in_ename
           );
End IF;												
------------------------------------------------------------------------------------------------------INSERT INTO chart & Update 
INSERT INTO acc.tbl_chart(
	id, sequ,aname, ename, menue_id, side_id, ccrelation_id, cc1_id, cc2_id, property_id, company_id, branch_id, notes, stop, level, parent_id, creationtime, createuser_id)
	VALUES (in_id, on_sequ, in_aname, in_ename, in_menue_id, in_side_id, in_ccrelation_id, in_cc1_id, in_cc2_id, in_property_id, in_company_id, in_branch_id, in_notes, in_stop, on_lvl, in_parent_id, on_servertime, in_user_id);
Update acc.tbl_chart SET parent = 'true' WHERE tbl_chart.id = in_parent_id;
------------------------------------------------------------------------------------------------------INSERT INTO audit
INSERT INTO grl.tbl_audit(
	id, eventtime, eventtype_id, doctype_id, doc_id, user_id, company_id)
	VALUES (on_audit_id, on_servertime, 21, 7, in_id, in_user_id, in_company_id);
------------------------------------------------------------------------------------------------------Success Return
RETURN QUERY select * from acc.tbl_chart order by acc.tbl_chart.sequ;
------------------------------------------------------------------------------------------------------EX
EXCEPTION WHEN OTHERS THEN
	GET STACKED DIAGNOSTICS
		ex_sqlstate = RETURNED_SQLSTATE,
		ex_colname = COLUMN_NAME,
		ex_constraintname = CONSTRAINT_NAME,
		ex_datatype = PG_DATATYPE_NAME,
		ex_msgtext = MESSAGE_TEXT,
		ex_tablename = TABLE_NAME,
		ex_schemaname = SCHEMA_NAME,
		ex_details = PG_EXCEPTION_DETAIL,
		ex_hint = PG_EXCEPTION_HINT,
		ex_context = PG_EXCEPTION_CONTEXT;

	DROP TABLE IF EXISTS temp_EX;
	CREATE TEMP TABLE temp_EX as SELECT * from acc.tbl_chart where id = '0';
INSERT INTO temp_EX(notes)VALUES('PostgreSQL'||','|| ex_id || ',' || ex_sqlstate || ',' || ex_msgtext || ',' || ex_context);
------------------------------------------------------------------------------------------------------INSERT INTO ex
INSERT INTO grl.tbl_ex(
id, sqlstate, colname, constraintname, datatype, msgtext, tablename, schemaname, details, hint, context, extime, company_id, branche_id, store_id, user_id, eventtype_id, doc_id)
VALUES(ex_id, ex_sqlstate, ex_colname, ex_constraintname, ex_datatype, ex_msgtext, ex_tablename, ex_schemaname, ex_details, ex_hint, ex_context, on_servertime, in_company_id, in_branch_id, null, in_user_id, 21, in_id);

------------------------------------------------------------------------------------------------------Faild Return
return QUERY select * from temp_EX;
End

$BODY$;

ALTER FUNCTION acc.fnc_chart_insert(character varying, text, text, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, text, boolean, timestamp without time zone, character varying, character varying)
    OWNER TO postgres;


-- FUNCTION: acc.fnc_chart_delete(character varying, character varying, character varying)

-- DROP FUNCTION acc.fnc_chart_delete(character varying, character varying, character varying);

CREATE OR REPLACE FUNCTION acc.fnc_chart_delete(
	in_id character varying,
	in_company_id character varying,
	in_user_id character varying)
    RETURNS SETOF acc.tbl_chart 
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
    ROWS 1000
AS $BODY$

declare 
	on_servertime timestamp;
	on_current_edit smallint;
	on_edit_id integer;
	on_audit_id bigint;
--------------------------------------
	ex_id integer;
	ex_sqlstate text;
	ex_colname text; 
	ex_constraintname text; 
	ex_datatype text; 
	ex_msgtext text; 
	ex_tablename text; 
	ex_schemaname text; 
	ex_details text; 
	ex_hint text; 
	ex_context text; 
BEGIN	
	ex_id = (select(select max(id) from grl.tbl_ex) + 1); if ex_id is null then ex_id = 1; end if;
	on_edit_id = (select(select max(id) from acc.tbl_chartedit) + 1); if on_edit_id is null then on_edit_id = 1; end if;
	on_audit_id = (select(select max(id) from grl.tbl_audit) + 1); if on_audit_id is null then on_audit_id = 1; end if;	
	on_servertime = (select(current_timestamp));
	on_current_edit = (select(select edit from acc.tbl_chart  WHERE id = in_id AND company_id = in_company_id));		
-------------------------------------------------------------------------UPDATE acc.tbl_chartedit & UPDATE acc.tbl_chart
INSERT INTO acc.tbl_chartedit(
	id, chart_id, sequ, aname, ename, menue_id, side_id, ccrelation_id, cc1_id, cc2_id, property_id, company_id, branch_id, 
	notes, stop, activetime, level, parent, parent_id, creationtime, editingtime, createuser_id, edituser_id, edit, delete)
	SELECT on_edit_id, id, sequ, aname, ename, menue_id, side_id, ccrelation_id, cc1_id, cc2_id, property_id, company_id, branch_id, 
	notes, stop, activetime, level, parent, parent_id, creationtime, on_servertime, createuser_id, in_user_id, on_current_edit, 1
	FROM acc.tbl_chart
	WHERE id = in_id AND company_id = in_company_id;

DELETE FROM acc.tbl_chart
	WHERE id = in_id AND company_id = in_company_id;

IF (select property_id from acc.tbl_chart where acc.tbl_chart.id = in_id) = '1' --if customer
THEN

DELETE FROM  acc.tbl_cust WHERE id = in_id AND company_id = in_company_id;

End IF;

IF (select property_id from acc.tbl_chart where acc.tbl_chart.id = in_id) = '2' -- if vendor
THEN

DELETE FROM  acc.tbl_ven WHERE id = in_id AND company_id = in_company_id;

End IF;												
------------------------------------------------------------------------------------------------------INSERT INTO audit
INSERT INTO grl.tbl_audit(
	id, eventtime, eventtype_id, doctype_id, doc_id, user_id, company_id)
	VALUES (on_audit_id, on_servertime, 23, 7, in_id, in_user_id, in_company_id);
------------------------------------------------------------------------------------------------------Success Return
RETURN QUERY select * from acc.tbl_chart order by acc.tbl_chart.sequ;
------------------------------------------------------------------------------------------------------EX
EXCEPTION WHEN OTHERS THEN
	GET STACKED DIAGNOSTICS
		ex_sqlstate = RETURNED_SQLSTATE,
		ex_colname = COLUMN_NAME,
		ex_constraintname = CONSTRAINT_NAME,
		ex_datatype = PG_DATATYPE_NAME,
		ex_msgtext = MESSAGE_TEXT,
		ex_tablename = TABLE_NAME,
		ex_schemaname = SCHEMA_NAME,
		ex_details = PG_EXCEPTION_DETAIL,
		ex_hint = PG_EXCEPTION_HINT,
		ex_context = PG_EXCEPTION_CONTEXT;

	DROP TABLE IF EXISTS temp_EX;
	CREATE TEMP TABLE temp_EX as SELECT * from acc.tbl_chart where id = '0';
INSERT INTO temp_EX(notes)VALUES('PostgreSQL'||','|| ex_id || ',' || ex_sqlstate || ',' || ex_msgtext || ',' || ex_context);
------------------------------------------------------------------------------------------------------INSERT INTO ex
INSERT INTO grl.tbl_ex(
id, sqlstate, colname, constraintname, datatype, msgtext, tablename, schemaname, details, hint, context, extime, company_id, branche_id, store_id, user_id, eventtype_id, doc_id)
VALUES(ex_id, ex_sqlstate, ex_colname, ex_constraintname, ex_datatype, ex_msgtext, ex_tablename, ex_schemaname, ex_details, ex_hint, ex_context, on_servertime, in_company_id, null, null, in_user_id, 23, in_id);

------------------------------------------------------------------------------------------------------Faild Return
return QUERY select * from temp_EX;
End

$BODY$;

ALTER FUNCTION acc.fnc_chart_delete(character varying, character varying, character varying)
    OWNER TO postgres;


-- FUNCTION: acc.fnc_chart_update(character varying, text, text, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, text, boolean, timestamp without time zone, character varying, character varying)

-- DROP FUNCTION acc.fnc_chart_update(character varying, text, text, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, text, boolean, timestamp without time zone, character varying, character varying);

CREATE OR REPLACE FUNCTION acc.fnc_chart_update(
	in_id character varying,
	in_aname text,
	in_ename text,
	in_menue_id character varying,
	in_side_id character varying,
	in_ccrelation_id character varying,
	in_cc1_id character varying,
	in_cc2_id character varying,
	in_property_id character varying,
	in_company_id character varying,
	in_branch_id character varying,
	in_notes text,
	in_stop boolean,
	in_activetime timestamp without time zone,
	in_parent_id character varying,
	in_user_id character varying)
    RETURNS SETOF acc.tbl_chart 
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
    ROWS 1000
AS $BODY$

declare 
	on_servertime timestamp;
	on_current_edit smallint;
	on_edit_id integer;
	on_audit_id bigint;
--------------------------------------
	ex_id integer;
	ex_sqlstate text;
	ex_colname text; 
	ex_constraintname text; 
	ex_datatype text; 
	ex_msgtext text; 
	ex_tablename text; 
	ex_schemaname text; 
	ex_details text; 
	ex_hint text; 
	ex_context text; 
BEGIN	
	ex_id = (select(select max(id) from grl.tbl_ex) + 1); if ex_id is null then ex_id = 1; end if;
	on_edit_id = (select(select max(id) from acc.tbl_chartedit) + 1); if on_edit_id is null then on_edit_id = 1; end if;
	on_audit_id = (select(select max(id) from grl.tbl_audit) + 1); if on_audit_id is null then on_audit_id = 1; end if;	
	on_servertime = (select(current_timestamp));
	on_current_edit = (select(select edit from acc.tbl_chart  WHERE id = in_id AND company_id = in_company_id) + 1);	
	in_aname = (select case when (in_aname IS NULL OR in_aname = '') THEN in_ename else in_aname end);
	in_ename = (select case when (in_ename IS NULL OR in_ename = '') THEN in_aname else in_ename end);
	
-------------------------------------------------------------------------UPDATE acc.tbl_chartedit & UPDATE acc.tbl_chart
INSERT INTO acc.tbl_chartedit(
	id, chart_id, sequ, aname, ename, menue_id, side_id, ccrelation_id, cc1_id, cc2_id, property_id, company_id, branch_id, 
	notes, stop, activetime, level, parent, parent_id, creationtime, editingtime, createuser_id, edituser_id, edit)
	SELECT on_edit_id, id, sequ, aname, ename, menue_id, side_id, ccrelation_id, cc1_id, cc2_id, property_id, company_id, branch_id, 
	notes, stop, activetime, level, parent, parent_id, creationtime, on_servertime, createuser_id, in_user_id, on_current_edit
	FROM acc.tbl_chart
	WHERE id = in_id AND company_id = in_company_id;

UPDATE acc.tbl_chart
	SET aname=in_aname, ename=in_ename, menue_id=in_menue_id, side_id=in_side_id, ccrelation_id=in_ccrelation_id, 
	cc1_id=in_cc1_id, cc2_id=in_cc2_id, property_id=in_property_id, company_id=in_company_id, branch_id=in_branch_id, 
	notes=in_notes, stop=in_stop, activetime=in_activetime, editingtime=on_servertime, edituser_id=in_user_id, edit=on_current_edit
	WHERE id = in_id AND company_id = in_company_id;

IF (select property_id from acc.tbl_chart where acc.tbl_chart.id = in_id) = '1' --if customer
THEN

INSERT INTO acc.tbl_cust
           (id
           ,aname
		   ,ename
           )
     VALUES
           (in_id
           ,in_aname
		   ,in_ename
           )
ON CONFLICT (id) DO UPDATE 
	SET aname=in_aname, ename=in_ename;

End IF;

IF (select property_id from acc.tbl_chart where acc.tbl_chart.id = in_id) = '2' -- if vendor
THEN

INSERT INTO acc.tbl_ven
           (id
           ,aname
		   ,ename
           )
     VALUES
           (in_id
           ,in_aname
		   ,in_ename
           )
ON CONFLICT (id) DO UPDATE 
	SET aname=in_aname, ename=in_ename;
End IF;												
------------------------------------------------------------------------------------------------------INSERT INTO audit
INSERT INTO grl.tbl_audit(
	id, eventtime, eventtype_id, doctype_id, doc_id, user_id, company_id)
	VALUES (on_audit_id, on_servertime, 22, 7, in_id, in_user_id, in_company_id);
------------------------------------------------------------------------------------------------------Success Return
RETURN QUERY select * from acc.tbl_chart order by acc.tbl_chart.sequ;
------------------------------------------------------------------------------------------------------EX
EXCEPTION WHEN OTHERS THEN
	GET STACKED DIAGNOSTICS
		ex_sqlstate = RETURNED_SQLSTATE,
		ex_colname = COLUMN_NAME,
		ex_constraintname = CONSTRAINT_NAME,
		ex_datatype = PG_DATATYPE_NAME,
		ex_msgtext = MESSAGE_TEXT,
		ex_tablename = TABLE_NAME,
		ex_schemaname = SCHEMA_NAME,
		ex_details = PG_EXCEPTION_DETAIL,
		ex_hint = PG_EXCEPTION_HINT,
		ex_context = PG_EXCEPTION_CONTEXT;

	DROP TABLE IF EXISTS temp_EX;
	CREATE TEMP TABLE temp_EX as SELECT * from acc.tbl_chart where id = '0';
INSERT INTO temp_EX(notes)VALUES('PostgreSQL'||','|| ex_id || ',' || ex_sqlstate || ',' || ex_msgtext || ',' || ex_context);
------------------------------------------------------------------------------------------------------INSERT INTO ex
INSERT INTO grl.tbl_ex(
id, sqlstate, colname, constraintname, datatype, msgtext, tablename, schemaname, details, hint, context, extime, company_id, branche_id, store_id, user_id, eventtype_id, doc_id)
VALUES(ex_id, ex_sqlstate, ex_colname, ex_constraintname, ex_datatype, ex_msgtext, ex_tablename, ex_schemaname, ex_details, ex_hint, ex_context, on_servertime, in_company_id, in_branch_id, null, in_user_id, 22, in_id);

------------------------------------------------------------------------------------------------------Faild Return
return QUERY select * from temp_EX;
End

$BODY$;

ALTER FUNCTION acc.fnc_chart_update(character varying, text, text, character varying, character varying, character varying, character varying, character varying, character varying, character varying, character varying, text, boolean, timestamp without time zone, character varying, character varying)
    OWNER TO postgres;


-- View: acc.viw_repjor

-- DROP VIEW acc.viw_repjor;

CREATE OR REPLACE VIEW acc.viw_repjor AS
 SELECT d.jor_id AS "Entry ID",
    d.debit AS "Debit",
    d.credit AS "Credit",
    sum(d.debit - d.credit) OVER (PARTITION BY d.chart_id ORDER BY d.ctid) AS "Balance",
    d.chart_id AS "Account ID",
    chart.aname AS "Account Name",
    doctype.aname AS "Document Type Name",
    d.doc_id AS "Document ID",
    d.currency_id AS "Currency ID",
    currency.aname AS "Currency Name",
    d.currencyprice AS "Currency Price",
    jortype.aname AS "Entry Type",
    d.yyyy AS "Year",
    d.mm AS "Month",
    d.ref,
    d.notes AS "Notes",
    d.company_id AS "Company ID",
    com.aname AS "Company Name",
    d.fyear_id AS "Fyear ID",
    fyear.aname AS "Fyear Name",
    d.branch_id AS "Branch ID",
    d.cc1_id AS "Cost Center 1 ID",
    cc1.aname AS "Cost Center 1 Name",
    d.cc2_id AS "Cost Center 2 ID",
    cc2.aname AS "Cost Center 2 Name",
    d.creationtime AS "Date",
    d.createservertime AS "Server Time",
    d.createuser_id AS "User ID",
    users.aname AS "User Name",
    d.edit AS "Edited",
    chart.notes
   FROM acc.tbl_jord d
     LEFT JOIN acc.tbl_chart chart ON d.chart_id = chart.id::text
     LEFT JOIN grl.tbl_doctype doctype ON d.doctype_id = doctype.id
     LEFT JOIN grl.tbl_currencies currency ON d.currency_id::text = currency.id::text
     LEFT JOIN acc.tbl_jortype jortype ON d.jortype_id = jortype.id::text
     LEFT JOIN grl.tbl_companies com ON d.company_id::text = com.id::text
     LEFT JOIN grl.tbl_fyears fyear ON d.fyear_id::text = fyear.id::text
     LEFT JOIN grl.tbl_cc cc1 ON d.cc1_id::text = cc1.id::text
     LEFT JOIN grl.tbl_cc cc2 ON d.cc2_id::text = cc2.id::text
     LEFT JOIN grl.tbl_users users ON d.createuser_id::text = users.id::text
  ORDER BY d.ctid;

ALTER TABLE acc.viw_repjor
    OWNER TO postgres;



-- View: acc.viw_st

-- DROP VIEW acc.viw_st;

CREATE OR REPLACE VIEW acc.viw_st AS
 SELECT j.chart_id,
    j.debit,
    j.credit,
    j.notes,
    j.jor_id,
    j.creationtime AS date,
    j.doctype_id,
    j.cc1_id,
    j.cc2_id,
    j.branch_id,
    j.company_id,
    d.aname AS doctype_aname,
    d.ename AS doctype_ename
   FROM acc.tbl_jord j
     LEFT JOIN grl.tbl_doctype d ON j.doctype_id = d.id
  ORDER BY j.jor_id;

ALTER TABLE acc.viw_st
    OWNER TO postgres;

-- View: acc.viw_tb

-- DROP VIEW acc.viw_tb;

CREATE OR REPLACE VIEW acc.viw_tb AS
 SELECT c.id,
    c.aname,
    c.ename,
    ( SELECT
                CASE
                    WHEN c.parent = true THEN ( SELECT sum(d.debit * d.currencyprice) AS sum
                       FROM acc.tbl_jord d
                      WHERE d.chart_id ~~ (c.id::text || '%'::text))
                    ELSE j.debit * j.currencyprice
                END AS "case") AS debit,
    ( SELECT
                CASE
                    WHEN c.parent = true THEN ( SELECT sum(d.credit * d.currencyprice) AS sum
                       FROM acc.tbl_jord d
                      WHERE d.chart_id ~~ (c.id::text || '%'::text))
                    ELSE j.credit * j.currencyprice
                END AS "case") AS credit,
    j.creationtime AS date,
    c.level,
    c.parent_id,
    c.parent,
    c.menue_id,
    c.side_id,
    j.cc1_id,
    j.cc2_id,
    j.branch_id,
    j.company_id
   FROM acc.tbl_chart c
     LEFT JOIN acc.tbl_jord j ON c.id::text = j.chart_id
  ORDER BY c.id;

ALTER TABLE acc.viw_tb
    OWNER TO postgres;

-- View: acc.viw_jor_select

-- DROP VIEW acc.viw_jor_select;

CREATE OR REPLACE VIEW acc.viw_jor_select AS
 SELECT h.id AS h_id,
    h.doctype_id AS h_doctype_id,
    h.sequ AS h_sequ,
    h.doc_id AS h_doc_id,
    h.currency_id AS h_currency_id,
    h.currencyprice AS h_currencyprice,
    h.jortype_id AS h_jortype_id,
    h.notes AS h_notes,
    h.branch_id AS h_branch_id,
    h.company_id AS h_company_id,
    h.cc1_id AS h_cc1_id,
    h.cc2_id AS h_cc2_id,
    h.creationtime AS h_creationtime,
    h.createuser_id AS h_createuser_id,
    d.debit AS d_debit,
    d.credit AS d_credit,
    d.chart_id AS d_chart_id,
    c.aname AS d_chart_aname,
    c.ename AS d_chart_ename,
    d.doctype_id AS d_doctype_id,
    d.doc_id AS d_doc_id,
    d.currency_id AS d_currency_id,
    d.currencyprice AS d_currencyprice,
    d.jortype_id AS d_jortype_id,
    d.notes AS d_notes,
    cc1.aname AS d_cc1_aname,
    cc1.ename AS d_cc1_ename,
    d.cc1_id AS d_cc1_id,
    cc2.aname AS d_cc2_aname,
    cc2.ename AS d_cc2_ename,
    d.cc2_id AS d_cc2_id,
    branch.aname AS d_branch_aname,
    branch.ename AS d_branch_ename,
    d.branch_id AS d_branch_id,
    d.company_id
   FROM acc.tbl_jord d
     LEFT JOIN acc.tbl_jor h ON d.jor_id::text = h.id::text
     LEFT JOIN acc.tbl_chart c ON d.chart_id = c.id::text
     LEFT JOIN acc.tbl_cc cc1 ON d.cc1_id::text = cc1.id::text
     LEFT JOIN acc.tbl_cc cc2 ON d.cc2_id::text = cc2.id::text
     LEFT JOIN grl.tbl_branches branch ON d.branch_id::text = branch.id::text
  WHERE branch.company_id::text = d.company_id::text
  ORDER BY d.ctid;

ALTER TABLE acc.viw_jor_select
    OWNER TO postgres;

-- FUNCTION: acc.fnc_jor_delete(character varying, character varying, character varying)

-- DROP FUNCTION acc.fnc_jor_delete(character varying, character varying, character varying);

CREATE OR REPLACE FUNCTION acc.fnc_jor_delete(
	in_id character varying,
	in_company_id character varying,
	in_user_id character varying)
    RETURNS SETOF acc.viw_jor_select 
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
    ROWS 1000
AS $BODY$

declare 
	on_edit_id integer;
	on_jorD_id integer;
	on_servertime timestamp; 
	on_yyyy text;
	on_yy text;
	on_MM text;
	on_ref text;
	on_jorRefType text;
	on_sequ smallint;
	on_xsequ text;
	on_audit_id bigint;
--------------------------------------------
	ex_id integer;
	ex_sqlstate text;
	ex_colname text; 
	ex_constraintname text; 
	ex_datatype text; 
	ex_msgtext text; 
	ex_tablename text; 
	ex_schemaname text; 
	ex_details text; 
	ex_hint text; 
	ex_context text; 
BEGIN
	ex_id = (select(select max(id) from grl.tbl_ex) + 1); if ex_id is null then ex_id = 1; end if;
	on_edit_id = (select(select max(id) from acc.tbl_joredit) + 1); if on_edit_id is null then on_edit_id = 1; end if;
	on_audit_id = (select(select max(id) from grl.tbl_audit) + 1); if on_audit_id is null then on_audit_id = 1; end if;
	on_servertime = (select(current_timestamp));					 					 
------------------------------------------------------------------------------------------------------INSERT INTO joredit
INSERT INTO acc.tbl_joredit(
	id, jor_id, sequ, doctype_id, doc_id, currency_id, currencyprice, jortype_id, yyyy, mm, ref, 
	notes, company_id, fyear_id, branch_id, cc1_id, cc2_id, creationtime, createservertime, editingtime, editservertime, 
	createuser_id, edituser_id, edit, delete)
SELECT on_edit_id, id, sequ, doctype_id, doc_id, currency_id, currencyprice, jortype_id, yyyy, mm, ref, 
	notes, company_id, fyear_id, branch_id, cc1_id, cc2_id, creationtime, createservertime, on_servertime, on_servertime, 
	createuser_id, in_user_id, edit, 1
	FROM acc.tbl_jor j WHERE j.id = in_id AND j.company_id = in_company_id;
	
DELETE FROM acc.tbl_jor j WHERE j.id = in_id AND j.company_id = in_company_id;
------------------------------------------------------------------------------------------------------INSERT INTO jordedit
INSERT INTO acc.tbl_jordedit(
	jord_id, jor_id, debit, credit, 
	chart_id, doctype_id, doc_id, currency_id, currencyprice, 
	jortype_id, yyyy, mm, ref,notes, 
	company_id, fyear_id, branch_id, cc1_id, cc2_id, 
	creationtime, createservertime, editingtime, editservertime,createuser_id, edituser_id, edit, delete)
	
SELECT id, jor_id, debit, credit, 
	chart_id, doctype_id, doc_id, currency_id, currencyprice, 
	jortype_id, yyyy, mm, ref, notes, 
	company_id, fyear_id, branch_id, cc1_id, cc2_id, 
	creationtime, createservertime, on_servertime, on_servertime, createuser_id, in_user_id, edit, 1
	FROM acc.tbl_jord jd WHERE jd.jor_id = in_id AND jd.company_id = in_company_id;
	
DELETE FROM acc.tbl_jord jd WHERE jd.jor_id = in_id AND jd.company_id = in_company_id;
------------------------------------------------------------------------------------------------------INSERT INTO audit
INSERT INTO grl.tbl_audit(
	id, eventtime, eventtype_id, doctype_id, doc_id, user_id, company_id)
	VALUES (on_audit_id, on_servertime, 32, 10, in_id, in_user_id, in_company_id);
------------------------------------------------------------------------------------------------------Success Return
RETURN QUERY select * from acc.viw_jor_Select where h_id = in_id;
------------------------------------------------------------------------------------------------------EX
EXCEPTION WHEN OTHERS THEN
	GET STACKED DIAGNOSTICS
		ex_sqlstate = RETURNED_SQLSTATE,
		ex_colname = COLUMN_NAME,
		ex_constraintname = CONSTRAINT_NAME,
		ex_datatype = PG_DATATYPE_NAME,
		ex_msgtext = MESSAGE_TEXT,
		ex_tablename = TABLE_NAME,
		ex_schemaname = SCHEMA_NAME,
		ex_details = PG_EXCEPTION_DETAIL,
		ex_hint = PG_EXCEPTION_HINT,
		ex_context = PG_EXCEPTION_CONTEXT;
	DROP TABLE IF EXISTS temp_EX;
	CREATE TEMP TABLE temp_EX as SELECT * from acc.viw_jor_Select where h_id = '0';
	INSERT INTO temp_EX(h_notes)VALUES('PostgreSQL'||','|| ex_id || ',' || ex_sqlstate || ',' || ex_msgtext || ',' || ex_context);
------------------------------------------------------------------------------------------------------INSERT INTO ex
INSERT INTO grl.tbl_ex(
id, sqlstate, colname, constraintname, datatype, msgtext, tablename, schemaname, details, hint, context, extime, company_id, branche_id, store_id, user_id, eventtype_id, doc_id)
VALUES(ex_id, ex_sqlstate, ex_colname, ex_constraintname, ex_datatype, ex_msgtext, ex_tablename, ex_schemaname, ex_details, ex_hint, ex_context, on_servertime, in_company_id, null, null, in_user_id,32, in_id);
------------------------------------------------------------------------------------------------------Faild Return
return QUERY select * from temp_EX;
End

$BODY$;

ALTER FUNCTION acc.fnc_jor_delete(character varying, character varying, character varying)
    OWNER TO postgres;
-- FUNCTION: acc.fnc_jor_insert(character varying, character varying, numeric, text, text, character varying, character varying, character varying, character varying, character varying, timestamp without time zone, character varying, json)

-- DROP FUNCTION acc.fnc_jor_insert(character varying, character varying, numeric, text, text, character varying, character varying, character varying, character varying, character varying, timestamp without time zone, character varying, json);

CREATE OR REPLACE FUNCTION acc.fnc_jor_insert(
	in_id character varying,
	in_currency_id character varying,
	in_currencyprice numeric,
	in_jortype_id text,
	in_notes text,
	in_company_id character varying,
	in_fyear_id character varying,
	in_branch_id character varying,
	in_cc1_id character varying,
	in_cc2_id character varying,
	in_creationtime timestamp without time zone,
	in_user_id character varying,
	in_jord json)
    RETURNS SETOF acc.viw_jor_select 
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
    ROWS 1000
AS $BODY$

declare 
	on_jorD_id integer;
	on_servertime timestamp; 
	on_yyyy text;
	on_yy text;
	on_MM text;
	on_ref text;
	on_jorRefType text;
	on_sequ smallint;
	on_xsequ text;
	on_audit_id bigint;
-------------------------------------------
	i jsonb;
	on_jorD_debit numeric;
	on_jorD_credit numeric;
	on_jorD_chart_id text;
	on_jorD_notes text;
	on_jorD_cc1_id text;
	on_jorD_cc2_id text;
	on_jorD_branch_id text;
--------------------------------------------
	ex_id integer;
	ex_sqlstate text;
	ex_colname text; 
	ex_constraintname text; 
	ex_datatype text; 
	ex_msgtext text; 
	ex_tablename text; 
	ex_schemaname text; 
	ex_details text; 
	ex_hint text; 
	ex_context text; 
BEGIN
	ex_id = (select(select max(id) from grl.tbl_ex) + 1); if ex_id is null then ex_id = 1; end if;
	on_audit_id = (select(select max(id) from grl.tbl_audit) + 1); if on_audit_id is null then on_audit_id = 1; end if;
	on_jorD_id = (select(select max(id) from acc.tbl_jorD) + 1); if on_jorD_id is null then on_jorD_id = 1; end if;
	on_servertime = (select(current_timestamp));
	
	on_yyyy = (select extract(year from   in_creationtime));
	on_MM = (select extract(month from   in_creationtime));
	on_MM = (select case when (length(on_MM) = 1) then (select concat('0',on_MM)) else on_MM end);
	on_ref = '000';
	
	--on_sequ = (select(select max(sequ) from acc.tbl_jor
					  --where company_id = in_company_id
					  --and branch_id = in_branch_id
					  --and yyyy = on_yyyy
					  --and mm = on_MM
					  --and ref = on_ref			   
					 --) + 1);
					 
	on_sequ = (select(select max(sequ) from acc.tbl_jor
					  WHERE branch_id = in_branch_id	
					  AND company_id = in_company_id	   
					 ) + 1);
					 					 
	on_sequ = (select case when (on_sequ is NULL) then 1 else on_sequ end);
	on_xsequ = on_sequ::text;
	
	WHILE (length(on_xsequ) < 5)
		loop
			on_xsequ = (select concat('0',on_xsequ));
		end loop;
		
	on_yy = (select substring(on_yyyy from 3 for 2));
	--in_id = (in_branch_id || on_yy || on_MM || on_ref || on_xsequ);
	in_id = (in_branch_id || on_yy || on_xsequ);
------------------------------------------------------------------------------------------------------INSERT INTO jor 
INSERT INTO acc.tbl_jor(
	id, 
	sequ, 
	currency_id, 
	currencyprice, 
	jortype_id, 
	yyyy,
	MM,
	ref,
	notes, 
	company_id, 
	fyear_id, 
	branch_id, 
	cc1_id, 
	cc2_id, 
	creationtime, 
	createservertime, 
	createuser_id)
	VALUES (
		in_id, 
		on_sequ, 
		in_currency_id, 
		in_currencyprice, 
		in_jortype_id,
		on_yyyy,
		on_MM,
		on_ref,
		in_notes,
		in_company_id, 
		in_fyear_id, 
		in_branch_id, 
		in_cc1_id, 
		in_cc2_id, 
		in_creationtime, 
		on_servertime, 
		in_user_id);
------------------------------------------------------------------------------------------------------INSERT INTO jorD 
FOR i IN SELECT * FROM json_array_elements(in_jord)
  LOOP
  	on_jorD_debit := i->>'debit';
    on_jorD_credit := i->>'credit';
    on_jorD_chart_id := i->>'chart_id';
    on_jorD_notes := i->>'notes';
    on_jorD_cc1_id := i->>'cc1_id';
    on_jorD_cc2_id := i->>'cc2_id';
    on_jorD_branch_id := i->>'branch_id';
	
 	on_jorD_debit = (select case when (on_jorD_debit IS NULL) THEN 0 else on_jorD_debit end);
	on_jorD_credit = (select case when (on_jorD_credit IS NULL) THEN 0 else on_jorD_credit end);
	on_jorD_notes = (select case when (on_jorD_notes IS NULL OR on_jorD_notes = '') THEN in_notes else on_jorD_notes end);
	on_jorD_cc1_id = (select case when (on_jorD_cc1_id IS NULL OR on_jorD_cc1_id = '') THEN in_cc1_id else on_jorD_cc1_id end);
	on_jorD_cc2_id = (select case when (on_jorD_cc2_id IS NULL OR on_jorD_cc2_id = '') THEN in_cc2_id else on_jorD_cc2_id end);
	on_jorD_branch_id = (select case when (on_jorD_branch_id IS NULL OR on_jorD_branch_id = '') THEN in_branch_id else on_jorD_branch_id end);
	
	INSERT INTO acc.tbl_jord(
	id, 
	jor_id, 
	debit, 
	credit, 
	chart_id, 
	currency_id, 
	currencyprice, 
	jortype_id, 
	yyyy,
	MM,
	ref,
	notes, 
	company_id, 
	fyear_id, 
	branch_id, 
	cc1_id, 
	cc2_id, 
	creationtime, 
	createservertime, 
	createuser_id )
	VALUES (
		on_jorD_id, 
		in_id, 
		on_jorD_debit, 
		on_jorD_credit, 
		on_jorD_chart_id, 	
		in_currency_id, 
		in_currencyprice, 
		in_jortype_id, 
		on_yyyy,
		on_MM,
		on_ref,
		on_jorD_notes, 	
		in_company_id, 
		in_fyear_id,
		on_jorD_branch_id, 
		on_jorD_cc1_id, 
		on_jorD_cc2_id, 
		in_creationtime, 
		on_servertime, 
		in_user_id);
		
	on_jorD_id = on_jorD_id + 1;
 END LOOP;
------------------------------------------------------------------------------------------------------INSERT INTO audit
INSERT INTO grl.tbl_audit(
	id, eventtime, eventtype_id, doctype_id, doc_id, user_id, company_id)
	VALUES (on_audit_id, on_servertime, 30, 10, in_id, in_user_id, in_company_id);
------------------------------------------------------------------------------------------------------Success Return
RETURN QUERY select * from acc.viw_jor_Select where h_id = in_id;
------------------------------------------------------------------------------------------------------EX
EXCEPTION WHEN OTHERS THEN
	GET STACKED DIAGNOSTICS
		ex_sqlstate = RETURNED_SQLSTATE,
		ex_colname = COLUMN_NAME,
		ex_constraintname = CONSTRAINT_NAME,
		ex_datatype = PG_DATATYPE_NAME,
		ex_msgtext = MESSAGE_TEXT,
		ex_tablename = TABLE_NAME,
		ex_schemaname = SCHEMA_NAME,
		ex_details = PG_EXCEPTION_DETAIL,
		ex_hint = PG_EXCEPTION_HINT,
		ex_context = PG_EXCEPTION_CONTEXT;
	DROP TABLE IF EXISTS temp_EX;
	CREATE TEMP TABLE temp_EX as SELECT * from acc.viw_jor_Select where h_id = '0';
	INSERT INTO temp_EX(h_notes)VALUES('PostgreSQL'||','|| ex_id || ',' || ex_sqlstate || ',' || ex_msgtext || ',' || ex_context);
------------------------------------------------------------------------------------------------------INSERT INTO ex
INSERT INTO grl.tbl_ex(
id, sqlstate, colname, constraintname, datatype, msgtext, tablename, schemaname, details, hint, context, extime, company_id, branche_id, store_id, user_id, eventtype_id, doc_id)
VALUES(ex_id, ex_sqlstate, ex_colname, ex_constraintname, ex_datatype, ex_msgtext, ex_tablename, ex_schemaname, ex_details, ex_hint, ex_context, on_servertime, in_company_id, in_branch_id, null, in_user_id,30, in_id);
------------------------------------------------------------------------------------------------------Faild Return
return QUERY select * from temp_EX;
End

$BODY$;

ALTER FUNCTION acc.fnc_jor_insert(character varying, character varying, numeric, text, text, character varying, character varying, character varying, character varying, character varying, timestamp without time zone, character varying, json)
    OWNER TO postgres;
-- FUNCTION: acc.fnc_jor_select(character varying, integer, character varying, character varying, text)

-- DROP FUNCTION acc.fnc_jor_select(character varying, integer, character varying, character varying, text);

CREATE OR REPLACE FUNCTION acc.fnc_jor_select(
	in_id character varying,
	in_sequ integer,
	in_branch_id character varying,
	in_company_id character varying,
	in_selecttype text)
    RETURNS SETOF acc.viw_jor_select 
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
    ROWS 1000
AS $BODY$

declare 

BEGIN
------------------------------------------------------------------------------------------------------Select
IF in_selecttype = 'Select' THEN 

RETURN QUERY SELECT * FROM acc.viw_jor_Select WHERE h_id = in_id AND h_company_id = in_company_id;

END IF;
------------------------------------------------------------------------------------------------------Search
IF in_selecttype = 'Search' THEN 

RETURN QUERY SELECT * FROM acc.viw_jor_Select WHERE h_sequ = in_sequ AND h_branch_id = in_branch_id AND h_company_id = in_company_id;

END IF;
------------------------------------------------------------------------------------------------------First
IF in_selecttype = 'First' THEN 

in_id = (SELECT h_id FROM acc.viw_jor_Select WHERE h_branch_id = in_branch_id AND h_company_id = in_company_id ORDER BY h_sequ ASC LIMIT 1);
RETURN QUERY SELECT * FROM acc.viw_jor_Select WHERE h_id = in_id AND h_company_id = in_company_id;

END IF;
------------------------------------------------------------------------------------------------------Prev
IF in_selecttype = 'Prev' THEN 

in_sequ = (SELECT h_sequ FROM acc.viw_jor_Select WHERE h_id = in_id AND h_company_id = in_company_id LIMIT 1);
in_id = (SELECT h_id FROM acc.viw_jor_Select WHERE h_sequ < in_sequ AND h_branch_id = in_branch_id AND h_company_id = in_company_id ORDER BY h_sequ Desc LIMIT 1);
RETURN QUERY SELECT * FROM acc.viw_jor_Select WHERE h_id = in_id AND h_company_id = in_company_id;

END IF;
------------------------------------------------------------------------------------------------------Next
IF in_selecttype = 'Next' THEN 

in_sequ = (SELECT h_sequ FROM acc.viw_jor_Select WHERE h_id = in_id AND h_company_id = in_company_id LIMIT 1);
in_id = (SELECT h_id FROM acc.viw_jor_Select WHERE h_sequ > in_sequ AND h_branch_id = in_branch_id AND h_company_id = in_company_id ORDER BY h_sequ ASC LIMIT 1);
RETURN QUERY SELECT * FROM acc.viw_jor_Select WHERE h_id = in_id AND h_company_id = in_company_id;

END IF;
------------------------------------------------------------------------------------------------------Last
IF in_selecttype = 'Last' THEN 

in_id = (SELECT h_id FROM acc.viw_jor_Select WHERE h_branch_id = in_branch_id AND h_company_id = in_company_id ORDER BY h_sequ Desc LIMIT 1);
RETURN QUERY SELECT * FROM acc.viw_jor_Select WHERE h_id = in_id AND h_company_id = in_company_id;

END IF;

End

$BODY$;

ALTER FUNCTION acc.fnc_jor_select(character varying, integer, character varying, character varying, text)
    OWNER TO postgres;
-- FUNCTION: acc.fnc_jor_update(character varying, character varying, numeric, text, text, character varying, character varying, character varying, character varying, character varying, timestamp without time zone, character varying, json)

-- DROP FUNCTION acc.fnc_jor_update(character varying, character varying, numeric, text, text, character varying, character varying, character varying, character varying, character varying, timestamp without time zone, character varying, json);

CREATE OR REPLACE FUNCTION acc.fnc_jor_update(
	in_id character varying,
	in_currency_id character varying,
	in_currencyprice numeric,
	in_jortype_id text,
	in_notes text,
	in_company_id character varying,
	in_fyear_id character varying,
	in_branch_id character varying,
	in_cc1_id character varying,
	in_cc2_id character varying,
	in_creationtime timestamp without time zone,
	in_user_id character varying,
	in_jord json)
    RETURNS SETOF acc.viw_jor_select 
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
    ROWS 1000
AS $BODY$

declare 
	on_current_edit smallint;
	on_edit_id integer;
	on_jorD_id integer;
	on_servertime timestamp; 
	on_yyyy text;
	on_yy text;
	on_MM text;
	on_ref text;
	on_jorRefType text;
	on_sequ smallint;
	on_xsequ text;
	on_audit_id bigint;
-------------------------------------------
	i jsonb;
	on_jorD_debit numeric;
	on_jorD_credit numeric;
	on_jorD_chart_id text;
	on_jorD_notes text;
	on_jorD_cc1_id text;
	on_jorD_cc2_id text;
	on_jorD_branch_id text;
--------------------------------------------
	ex_id integer;
	ex_sqlstate text;
	ex_colname text; 
	ex_constraintname text; 
	ex_datatype text; 
	ex_msgtext text; 
	ex_tablename text; 
	ex_schemaname text; 
	ex_details text; 
	ex_hint text; 
	ex_context text; 
BEGIN
	ex_id = (select(select max(id) from grl.tbl_ex) + 1); if ex_id is null then ex_id = 1; end if;
	on_edit_id = (select(select max(id) from acc.tbl_joredit) + 1); if on_edit_id is null then on_edit_id = 1; end if;
	on_audit_id = (select(select max(id) from grl.tbl_audit) + 1); if on_audit_id is null then on_audit_id = 1; end if;
	on_jorD_id = (select(select max(id) from acc.tbl_jorD) + 1); if on_jorD_id is null then on_jorD_id = 1; end if;
	on_servertime = (select(current_timestamp));
	on_current_edit = (select(select edit from acc.tbl_jor  WHERE id = in_id AND company_id = in_company_id) + 1);
	
	on_yyyy = (select extract(year from   in_creationtime));
	on_MM = (select extract(month from   in_creationtime));
	on_MM = (select case when (length(on_MM) = 1) then (select concat('0',on_MM)) else on_MM end);
	on_ref = '000';
	
	on_sequ = (select sequ from acc.tbl_jor WHERE id = in_id AND company_id = in_company_id);					 					 
------------------------------------------------------------------------------------------------------INSERT INTO joredit
INSERT INTO acc.tbl_joredit(
	id, jor_id, sequ, doctype_id, doc_id, currency_id, currencyprice, jortype_id, yyyy, mm, ref, 
	notes, company_id, fyear_id, branch_id, cc1_id, cc2_id, creationtime, createservertime, editingtime, editservertime, 
	createuser_id, edituser_id, edit)
SELECT on_edit_id, id, sequ, doctype_id, doc_id, currency_id, currencyprice, jortype_id, yyyy, mm, ref, 
	notes, company_id, fyear_id, branch_id, cc1_id, cc2_id, creationtime, createservertime, in_creationtime, on_servertime, 
	createuser_id, in_user_id, on_current_edit
	FROM acc.tbl_jor j WHERE j.id = in_id AND j.company_id = in_company_id;
	
DELETE FROM acc.tbl_jor j WHERE j.id = in_id AND j.company_id = in_company_id;
------------------------------------------------------------------------------------------------------INSERT INTO jordedit
INSERT INTO acc.tbl_jordedit(
	jord_id, jor_id, debit, credit, 
	chart_id, doctype_id, doc_id, currency_id, currencyprice, 
	jortype_id, yyyy, mm, ref,notes, 
	company_id, fyear_id, branch_id, cc1_id, cc2_id, 
	creationtime, createservertime, editingtime, editservertime,createuser_id, edituser_id, edit)
	
SELECT id, jor_id, debit, credit, 
	chart_id, doctype_id, doc_id, currency_id, currencyprice, 
	jortype_id, yyyy, mm, ref, notes, 
	company_id, fyear_id, branch_id, cc1_id, cc2_id, 
	creationtime, createservertime, in_creationtime, on_servertime, createuser_id, in_user_id, on_current_edit
	FROM acc.tbl_jord jd WHERE jd.jor_id = in_id AND jd.company_id = in_company_id;
	
DELETE FROM acc.tbl_jord jd WHERE jd.jor_id = in_id AND jd.company_id = in_company_id;
------------------------------------------------------------------------------------------------------INSERT INTO jor
INSERT INTO acc.tbl_jor(
	id, 
	sequ, 
	currency_id, 
	currencyprice, 
	jortype_id, 
	yyyy,
	MM,
	ref,
	notes, 
	company_id, 
	fyear_id, 
	branch_id, 
	cc1_id, 
	cc2_id, 
	creationtime, 
	createservertime, 
	createuser_id)
	VALUES (
		in_id, 
		on_sequ, 
		in_currency_id, 
		in_currencyprice, 
		in_jortype_id,
		on_yyyy,
		on_MM,
		on_ref,
		in_notes,
		in_company_id, 
		in_fyear_id, 
		in_branch_id, 
		in_cc1_id, 
		in_cc2_id, 
		in_creationtime, 
		on_servertime, 
		in_user_id);
------------------------------------------------------------------------------------------------------INSERT INTO jorD 
FOR i IN SELECT * FROM json_array_elements(in_jord)
  LOOP
  	on_jorD_debit := i->>'debit';
    on_jorD_credit := i->>'credit';
    on_jorD_chart_id := i->>'chart_id';
    on_jorD_notes := i->>'notes';
    on_jorD_cc1_id := i->>'cc1_id';
    on_jorD_cc2_id := i->>'cc2_id';
    on_jorD_branch_id := i->>'branch_id';
	
 	on_jorD_debit = (select case when (on_jorD_debit IS NULL) THEN 0 else on_jorD_debit end);
	on_jorD_credit = (select case when (on_jorD_credit IS NULL) THEN 0 else on_jorD_credit end);
	on_jorD_notes = (select case when (on_jorD_notes IS NULL OR on_jorD_notes = '') THEN in_notes else on_jorD_notes end);
	on_jorD_cc1_id = (select case when (on_jorD_cc1_id IS NULL OR on_jorD_cc1_id = '') THEN in_cc1_id else on_jorD_cc1_id end);
	on_jorD_cc2_id = (select case when (on_jorD_cc2_id IS NULL OR on_jorD_cc2_id = '') THEN in_cc2_id else on_jorD_cc2_id end);
	on_jorD_branch_id = (select case when (on_jorD_branch_id IS NULL OR on_jorD_branch_id = '') THEN in_branch_id else on_jorD_branch_id end);
	
	INSERT INTO acc.tbl_jord(
	id, 
	jor_id, 
	debit, 
	credit, 
	chart_id, 
	currency_id, 
	currencyprice, 
	jortype_id, 
	yyyy,
	MM,
	ref,
	notes, 
	company_id, 
	fyear_id, 
	branch_id, 
	cc1_id, 
	cc2_id, 
	creationtime, 
	createservertime, 
	createuser_id )
	VALUES (
		on_jorD_id, 
		in_id, 
		on_jorD_debit, 
		on_jorD_credit, 
		on_jorD_chart_id, 	
		in_currency_id, 
		in_currencyprice, 
		in_jortype_id, 
		on_yyyy,
		on_MM,
		on_ref,
		on_jorD_notes, 	
		in_company_id, 
		in_fyear_id,
		on_jorD_branch_id, 
		on_jorD_cc1_id, 
		on_jorD_cc2_id, 
		in_creationtime, 
		on_servertime, 
		in_user_id);
		
	on_jorD_id = on_jorD_id + 1;
 END LOOP;
------------------------------------------------------------------------------------------------------INSERT INTO audit
INSERT INTO grl.tbl_audit(
	id, eventtime, eventtype_id, doctype_id, doc_id, user_id, company_id)
	VALUES (on_audit_id, on_servertime, 31, 10, in_id, in_user_id, in_company_id);
------------------------------------------------------------------------------------------------------Success Return
RETURN QUERY select * from acc.viw_jor_Select where h_id = in_id;
------------------------------------------------------------------------------------------------------EX
EXCEPTION WHEN OTHERS THEN
	GET STACKED DIAGNOSTICS
		ex_sqlstate = RETURNED_SQLSTATE,
		ex_colname = COLUMN_NAME,
		ex_constraintname = CONSTRAINT_NAME,
		ex_datatype = PG_DATATYPE_NAME,
		ex_msgtext = MESSAGE_TEXT,
		ex_tablename = TABLE_NAME,
		ex_schemaname = SCHEMA_NAME,
		ex_details = PG_EXCEPTION_DETAIL,
		ex_hint = PG_EXCEPTION_HINT,
		ex_context = PG_EXCEPTION_CONTEXT;
	DROP TABLE IF EXISTS temp_EX;
	CREATE TEMP TABLE temp_EX as SELECT * from acc.viw_jor_Select where h_id = '0';
	INSERT INTO temp_EX(h_notes)VALUES('PostgreSQL'||','|| ex_id || ',' || ex_sqlstate || ',' || ex_msgtext || ',' || ex_context);
------------------------------------------------------------------------------------------------------INSERT INTO ex
INSERT INTO grl.tbl_ex(
id, sqlstate, colname, constraintname, datatype, msgtext, tablename, schemaname, details, hint, context, extime, company_id, branche_id, store_id, user_id, eventtype_id, doc_id)
VALUES(ex_id, ex_sqlstate, ex_colname, ex_constraintname, ex_datatype, ex_msgtext, ex_tablename, ex_schemaname, ex_details, ex_hint, ex_context, on_servertime, in_company_id, in_branch_id, null, in_user_id,31, in_id);
------------------------------------------------------------------------------------------------------Faild Return
return QUERY select * from temp_EX;
End

$BODY$;

ALTER FUNCTION acc.fnc_jor_update(character varying, character varying, numeric, text, text, character varying, character varying, character varying, character varying, character varying, timestamp without time zone, character varying, json)
    OWNER TO postgres;
