DROP FUNCTION IF EXISTS  acc.fnc_jor_insert(character varying, character varying, numeric, text, text, character varying, character varying, character varying, character varying, character varying, timestamp without time zone, character varying, json);
DROP FUNCTION IF EXISTS  acc.fnc_jor_update(character varying, character varying, numeric, text, text, character varying, character varying, character varying, character varying, character varying, timestamp without time zone, character varying, json);
DROP FUNCTION IF EXISTS  acc.fnc_jor_delete(character varying, character varying, character varying);

DROP FUNCTION IF EXISTS acc.fnc_jor_select(character varying, integer, character varying, character varying, text);
DROP FUNCTION IF EXISTS acc.fnc_jor_close(text, json, text, text, boolean, text, timestamp without time zone, text);

DROP VIEW IF EXISTS acc.viw_jor_select;
----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------	
CREATE OR REPLACE VIEW acc.viw_jor_select AS
 SELECT h.id AS h_id,
    h.doctype_id AS h_doctype_id,
    h.sequ AS h_sequ,
    h.doc_id AS h_doc_id,
    h.currency_id AS h_currency_id,
    h.currencyprice AS h_currencyprice,
    h.jortype_id AS h_jortype_id,
    h.notes AS h_notes,
	h.fyear_id AS h_fyear_id,
    h.branch_id AS h_branch_id,
    h.company_id AS h_company_id,
    h.cc1_id AS h_cc1_id,
    h.cc2_id AS h_cc2_id,
    h.creationtime AS h_creationtime,
    h.createuser_id AS h_createuser_id,
	h.closed AS h_closed,
    d.debit AS d_debit,
    d.credit AS d_credit,
    d.chart_id AS d_chart_id,
    c.aname AS d_chart_aname,
    c.ename AS d_chart_ename,
    d.doctype_id AS d_doctype_id,
    d.doc_id AS d_doc_id,
    d.currency_id AS d_currency_id,
    d.currencyprice AS d_currencyprice,
    d.jortype_id AS d_jortype_id,
    d.notes AS d_notes,
    cc1.aname AS d_cc1_aname,
    cc1.ename AS d_cc1_ename,
    d.cc1_id AS d_cc1_id,
    cc2.aname AS d_cc2_aname,
    cc2.ename AS d_cc2_ename,
    d.cc2_id AS d_cc2_id,
    branch.aname AS d_branch_aname,
    branch.ename AS d_branch_ename,
    d.branch_id AS d_branch_id,
    d.company_id
   FROM acc.tbl_jord d
     LEFT JOIN acc.tbl_jor h ON d.jor_id::text = h.id::text
     LEFT JOIN acc.tbl_chart c ON d.chart_id = c.id::text
     LEFT JOIN acc.tbl_cc cc1 ON d.cc1_id::text = cc1.id::text
     LEFT JOIN acc.tbl_cc cc2 ON d.cc2_id::text = cc2.id::text
     LEFT JOIN grl.tbl_branches branch ON d.branch_id::text = branch.id::text
  WHERE branch.company_id::text = d.company_id::text
  ORDER BY d.ctid;
----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION acc.fnc_jor_insert(
	in_id character varying,
	in_currency_id character varying,
	in_currencyprice numeric,
	in_jortype_id text,
	in_notes text,
	in_company_id character varying,
	in_fyear_id character varying,
	in_branch_id character varying,
	in_cc1_id character varying,
	in_cc2_id character varying,
	in_creationtime timestamp without time zone,
	in_user_id character varying,
	in_jord json)
    RETURNS SETOF acc.viw_jor_select 
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
    ROWS 1000
AS $BODY$

declare 
	on_jorD_id integer;
	on_servertime timestamp; 
	on_yyyy text;
	on_yy text;
	on_MM text;
	on_ref text;
	on_jorRefType text;
	on_sequ smallint;
	on_xsequ text;
	on_audit_id bigint;
-------------------------------------------
	i jsonb;
	on_jorD_debit numeric;
	on_jorD_credit numeric;
	on_jorD_chart_id text;
	on_jorD_notes text;
	on_jorD_cc1_id text;
	on_jorD_cc2_id text;
	on_jorD_branch_id text;
--------------------------------------------
	ex_id integer;
	ex_sqlstate text;
	ex_colname text; 
	ex_constraintname text; 
	ex_datatype text; 
	ex_msgtext text; 
	ex_tablename text; 
	ex_schemaname text; 
	ex_details text; 
	ex_hint text; 
	ex_context text; 
BEGIN
	ex_id = (select(select max(id) from grl.tbl_ex) + 1); if ex_id is null then ex_id = 1; end if;
	on_audit_id = (select(select max(id) from grl.tbl_audit) + 1); if on_audit_id is null then on_audit_id = 1; end if;
	on_jorD_id = (select(select max(id) from acc.tbl_jorD) + 1); if on_jorD_id is null then on_jorD_id = 1; end if;
	on_servertime = (select(current_timestamp));
	
	on_yyyy = (select extract(year from   in_creationtime));
	on_MM = (select extract(month from   in_creationtime));
	on_MM = (select case when (length(on_MM) = 1) then (select concat('0',on_MM)) else on_MM end);
	on_ref = '000';
													
		
	--on_yy = (select substring(on_yyyy from 3 for 2));
	on_yy = (select substring((select extract(year from (select beigndate from grl.tbl_fyears where id = in_fyear_id))::text) from 3 for 2));	
													
	
	--on_sequ = (select(select max(sequ) from acc.tbl_jor
					  --where company_id = in_company_id
					  --and branch_id = in_branch_id
					  --and yyyy = on_yyyy
					  --and mm = on_MM
					  --and ref = on_ref			   
					 --) + 1);
					 
	on_sequ = (select(select max(sequ) from acc.tbl_jor
					  WHERE company_id = in_company_id	
					  AND branch_id = in_branch_id
					  AND fyear_id = in_fyear_id
					 ) + 1);
    on_sequ = (select case when (on_sequ is NULL) then 1 else on_sequ end);
	on_xsequ = on_sequ::text;	
	on_xsequ = repeat('0', 5 - length(on_xsequ)) || on_xsequ;
									
					 					 

	--in_id = (in_branch_id || on_yy || on_MM || on_ref || on_xsequ);
							  
	in_id = (in_branch_id || on_yy || on_xsequ);
								
							  
	WHILE exists(select * from acc.tbl_cin where postedjor_id = in_id)
	loop
		on_sequ = on_sequ + 1;
		on_xsequ = on_sequ::text;
		on_xsequ = repeat('0', 5 - length(on_xsequ)) || on_xsequ;
		in_id = (in_branch_id || on_yy || on_xsequ);
	end loop;	
							  
	WHILE exists(select * from acc.tbl_cout where postedjor_id = in_id)
	loop
		on_sequ = on_sequ + 1;
		on_xsequ = on_sequ::text;
		on_xsequ = repeat('0', 5 - length(on_xsequ)) || on_xsequ;								  
		in_id = (in_branch_id || on_yy || on_xsequ);
	end loop;	
------------------------------------------------------------------------------------------------------INSERT INTO jor 
INSERT INTO acc.tbl_jor(
	id, 
	sequ, 
	currency_id, 
	currencyprice, 
	jortype_id, 
	yyyy,
	MM,
	ref,
	notes, 
	company_id, 
	fyear_id, 
	branch_id, 
	cc1_id, 
	cc2_id, 
	creationtime, 
	createservertime, 
	createuser_id)
	VALUES (
		in_id, 
		on_sequ, 
		in_currency_id, 
		in_currencyprice, 
		in_jortype_id,
		on_yyyy,
		on_MM,
		on_ref,
		in_notes,
		in_company_id, 
		in_fyear_id, 
		in_branch_id, 
		in_cc1_id, 
		in_cc2_id, 
		in_creationtime, 
		on_servertime, 
		in_user_id);
------------------------------------------------------------------------------------------------------INSERT INTO jorD 
FOR i IN SELECT * FROM json_array_elements(in_jord)
  LOOP
  	on_jorD_debit := i->>'debit';
    on_jorD_credit := i->>'credit';
    on_jorD_chart_id := i->>'chart_id';
    on_jorD_notes := i->>'notes';
    on_jorD_cc1_id := i->>'cc1_id';
    on_jorD_cc2_id := i->>'cc2_id';
    on_jorD_branch_id := i->>'branch_id';
	
 	on_jorD_debit = (select case when (on_jorD_debit IS NULL) THEN 0 else on_jorD_debit end);
	on_jorD_credit = (select case when (on_jorD_credit IS NULL) THEN 0 else on_jorD_credit end);
	on_jorD_notes = (select case when (on_jorD_notes IS NULL OR on_jorD_notes = '') THEN in_notes else on_jorD_notes end);
	on_jorD_cc1_id = (select case when (on_jorD_cc1_id IS NULL OR on_jorD_cc1_id = '') THEN in_cc1_id else on_jorD_cc1_id end);
	on_jorD_cc2_id = (select case when (on_jorD_cc2_id IS NULL OR on_jorD_cc2_id = '') THEN in_cc2_id else on_jorD_cc2_id end);
	on_jorD_branch_id = (select case when (on_jorD_branch_id IS NULL OR on_jorD_branch_id = '') THEN in_branch_id else on_jorD_branch_id end);
	
	INSERT INTO acc.tbl_jord(
	id, 
	jor_id, 
	debit, 
	credit, 
	chart_id, 
	currency_id, 
	currencyprice, 
	jortype_id, 
	yyyy,
	MM,
	ref,
	notes, 
	company_id, 
	fyear_id, 
	branch_id, 
	cc1_id, 
	cc2_id, 
	creationtime, 
	createservertime, 
	createuser_id )
	VALUES (
		on_jorD_id, 
		in_id, 
		on_jorD_debit, 
		on_jorD_credit, 
		on_jorD_chart_id, 	
		in_currency_id, 
		in_currencyprice, 
		in_jortype_id, 
		on_yyyy,
		on_MM,
		on_ref,
		on_jorD_notes, 	
		in_company_id, 
		in_fyear_id,
		on_jorD_branch_id, 
		on_jorD_cc1_id, 
		on_jorD_cc2_id, 
		in_creationtime, 
		on_servertime, 
		in_user_id);
		
	on_jorD_id = on_jorD_id + 1;
 END LOOP;
------------------------------------------------------------------------------------------------------INSERT INTO audit
INSERT INTO grl.tbl_audit(
	id, eventtime, eventtype_id, doctype_id, doc_id, user_id, company_id)
	VALUES (on_audit_id, on_servertime, 30, 10, in_id, in_user_id, in_company_id);
------------------------------------------------------------------------------------------------------Success Return
RETURN QUERY select * from acc.viw_jor_Select where h_id = in_id AND h_company_id = in_company_id AND company_id = in_company_id;
------------------------------------------------------------------------------------------------------EX
EXCEPTION WHEN OTHERS THEN
	GET STACKED DIAGNOSTICS
		ex_sqlstate = RETURNED_SQLSTATE,
		ex_colname = COLUMN_NAME,
		ex_constraintname = CONSTRAINT_NAME,
		ex_datatype = PG_DATATYPE_NAME,
		ex_msgtext = MESSAGE_TEXT,
		ex_tablename = TABLE_NAME,
		ex_schemaname = SCHEMA_NAME,
		ex_details = PG_EXCEPTION_DETAIL,
		ex_hint = PG_EXCEPTION_HINT,
		ex_context = PG_EXCEPTION_CONTEXT;
	DROP TABLE IF EXISTS temp_EX;
	CREATE TEMP TABLE temp_EX as SELECT * from acc.viw_jor_Select where h_id = '0';
	INSERT INTO temp_EX(h_notes)VALUES('PostgreSQL'||','|| ex_id || ',' || ex_sqlstate || ',' || ex_msgtext || ',' || ex_context);
------------------------------------------------------------------------------------------------------INSERT INTO ex
INSERT INTO grl.tbl_ex(
id, sqlstate, colname, constraintname, datatype, msgtext, tablename, schemaname, details, hint, context, extime, company_id, branche_id, store_id, user_id, eventtype_id, doc_id)
VALUES(ex_id, ex_sqlstate, ex_colname, ex_constraintname, ex_datatype, ex_msgtext, ex_tablename, ex_schemaname, ex_details, ex_hint, ex_context, on_servertime, in_company_id, in_branch_id, null, in_user_id,30, in_id);
------------------------------------------------------------------------------------------------------Faild Return
return QUERY select * from temp_EX;
End

$BODY$;

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION acc.fnc_jor_update(
	in_id character varying,
	in_currency_id character varying,
	in_currencyprice numeric,
	in_jortype_id text,
	in_notes text,
	in_company_id character varying,
	in_fyear_id character varying,
	in_branch_id character varying,
	in_cc1_id character varying,
	in_cc2_id character varying,
	in_creationtime timestamp without time zone,
	in_user_id character varying,
	in_jord json)
    RETURNS SETOF acc.viw_jor_select 
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
    ROWS 1000
AS $BODY$

declare 
	on_current_edit smallint;
	on_edit_id integer;
	on_jorD_id integer;
	on_servertime timestamp; 
	on_yyyy text;
	on_yy text;
	on_MM text;
	on_ref text;
	on_jorRefType text;
	on_sequ smallint;
	on_xsequ text;
	on_audit_id bigint;
-------------------------------------------
	i jsonb;
	on_jorD_debit numeric;
	on_jorD_credit numeric;
	on_jorD_chart_id text;
	on_jorD_notes text;
	on_jorD_cc1_id text;
	on_jorD_cc2_id text;
	on_jorD_branch_id text;
--------------------------------------------
	ex_id integer;
	ex_sqlstate text;
	ex_colname text; 
	ex_constraintname text; 
	ex_datatype text; 
	ex_msgtext text; 
	ex_tablename text; 
	ex_schemaname text; 
	ex_details text; 
	ex_hint text; 
	ex_context text; 
BEGIN
	ex_id = (select(select max(id) from grl.tbl_ex) + 1); if ex_id is null then ex_id = 1; end if;
	on_edit_id = (select(select max(id) from acc.tbl_joredit) + 1); if on_edit_id is null then on_edit_id = 1; end if;
	on_audit_id = (select(select max(id) from grl.tbl_audit) + 1); if on_audit_id is null then on_audit_id = 1; end if;
	on_jorD_id = (select(select max(id) from acc.tbl_jorD) + 1); if on_jorD_id is null then on_jorD_id = 1; end if;
	on_servertime = (select(current_timestamp));
	on_current_edit = (select(select edit from acc.tbl_jor  WHERE id = in_id AND company_id = in_company_id) + 1);
	
	on_yyyy = (select extract(year from   in_creationtime));
	on_MM = (select extract(month from   in_creationtime));
	on_MM = (select case when (length(on_MM) = 1) then (select concat('0',on_MM)) else on_MM end);
	on_ref = '000';
	
	on_sequ = (select sequ from acc.tbl_jor WHERE id = in_id AND company_id = in_company_id);					 					 
------------------------------------------------------------------------------------------------------INSERT INTO joredit
INSERT INTO acc.tbl_joredit(
	id, jor_id, sequ, doctype_id, doc_id, currency_id, currencyprice, jortype_id, yyyy, mm, ref, 
	notes, company_id, fyear_id, branch_id, cc1_id, cc2_id, creationtime, createservertime, editingtime, editservertime, 
	createuser_id, edituser_id, edit)
SELECT on_edit_id, id, sequ, doctype_id, doc_id, currency_id, currencyprice, jortype_id, yyyy, mm, ref, 
	notes, company_id, fyear_id, branch_id, cc1_id, cc2_id, creationtime, createservertime, in_creationtime, on_servertime, 
	createuser_id, in_user_id, on_current_edit
	FROM acc.tbl_jor j WHERE j.id = in_id AND j.company_id = in_company_id;
------------------------------------------------------------------------------------------------------INSERT INTO jordedit
INSERT INTO acc.tbl_jordedit(
	jord_id, jor_id, debit, credit, 
	chart_id, doctype_id, doc_id, currency_id, currencyprice, 
	jortype_id, yyyy, mm, ref,notes, 
	company_id, fyear_id, branch_id, cc1_id, cc2_id, 
	creationtime, createservertime, editingtime, editservertime,createuser_id, edituser_id, edit)
	
SELECT id, jor_id, debit, credit, 
	chart_id, doctype_id, doc_id, currency_id, currencyprice, 
	jortype_id, yyyy, mm, ref, notes, 
	company_id, fyear_id, branch_id, cc1_id, cc2_id, 
	creationtime, createservertime, in_creationtime, on_servertime, createuser_id, in_user_id, on_current_edit
	FROM acc.tbl_jord jd WHERE jd.jor_id = in_id AND jd.company_id = in_company_id;
	
DELETE FROM acc.tbl_jord jd WHERE jd.jor_id = in_id AND jd.company_id = in_company_id;
DELETE FROM acc.tbl_jor j WHERE j.id = in_id AND j.company_id = in_company_id;
------------------------------------------------------------------------------------------------------INSERT INTO jor
INSERT INTO acc.tbl_jor(
	id, 
	sequ, 
	currency_id, 
	currencyprice, 
	jortype_id, 
	yyyy,
	MM,
	ref,
	notes, 
	company_id, 
	fyear_id, 
	branch_id, 
	cc1_id, 
	cc2_id, 
	creationtime, 
	createservertime, 
	createuser_id)
	VALUES (
		in_id, 
		on_sequ, 
		in_currency_id, 
		in_currencyprice, 
		in_jortype_id,
		on_yyyy,
		on_MM,
		on_ref,
		in_notes,
		in_company_id, 
		in_fyear_id, 
		in_branch_id, 
		in_cc1_id, 
		in_cc2_id, 
		in_creationtime, 
		on_servertime, 
		in_user_id);
------------------------------------------------------------------------------------------------------INSERT INTO jorD 
FOR i IN SELECT * FROM json_array_elements(in_jord)
  LOOP
  	on_jorD_debit := i->>'debit';
    on_jorD_credit := i->>'credit';
    on_jorD_chart_id := i->>'chart_id';
    on_jorD_notes := i->>'notes';
    on_jorD_cc1_id := i->>'cc1_id';
    on_jorD_cc2_id := i->>'cc2_id';
    on_jorD_branch_id := i->>'branch_id';
	
 	on_jorD_debit = (select case when (on_jorD_debit IS NULL) THEN 0 else on_jorD_debit end);
	on_jorD_credit = (select case when (on_jorD_credit IS NULL) THEN 0 else on_jorD_credit end);
	on_jorD_notes = (select case when (on_jorD_notes IS NULL OR on_jorD_notes = '') THEN in_notes else on_jorD_notes end);
	on_jorD_cc1_id = (select case when (on_jorD_cc1_id IS NULL OR on_jorD_cc1_id = '') THEN in_cc1_id else on_jorD_cc1_id end);
	on_jorD_cc2_id = (select case when (on_jorD_cc2_id IS NULL OR on_jorD_cc2_id = '') THEN in_cc2_id else on_jorD_cc2_id end);
	on_jorD_branch_id = (select case when (on_jorD_branch_id IS NULL OR on_jorD_branch_id = '') THEN in_branch_id else on_jorD_branch_id end);
	
	INSERT INTO acc.tbl_jord(
	id, 
	jor_id, 
	debit, 
	credit, 
	chart_id, 
	currency_id, 
	currencyprice, 
	jortype_id, 
	yyyy,
	MM,
	ref,
	notes, 
	company_id, 
	fyear_id, 
	branch_id, 
	cc1_id, 
	cc2_id, 
	creationtime, 
	createservertime, 
	createuser_id )
	VALUES (
		on_jorD_id, 
		in_id, 
		on_jorD_debit, 
		on_jorD_credit, 
		on_jorD_chart_id, 	
		in_currency_id, 
		in_currencyprice, 
		in_jortype_id, 
		on_yyyy,
		on_MM,
		on_ref,
		on_jorD_notes, 	
		in_company_id, 
		in_fyear_id,
		on_jorD_branch_id, 
		on_jorD_cc1_id, 
		on_jorD_cc2_id, 
		in_creationtime, 
		on_servertime, 
		in_user_id);
		
	on_jorD_id = on_jorD_id + 1;
 END LOOP;
------------------------------------------------------------------------------------------------------INSERT INTO audit
INSERT INTO grl.tbl_audit(
	id, eventtime, eventtype_id, doctype_id, doc_id, user_id, company_id)
	VALUES (on_audit_id, on_servertime, 31, 10, in_id, in_user_id, in_company_id);
------------------------------------------------------------------------------------------------------Success Return
RETURN QUERY select * from acc.viw_jor_Select where h_id = in_id AND h_company_id = in_company_id AND company_id = in_company_id;
------------------------------------------------------------------------------------------------------EX
EXCEPTION WHEN OTHERS THEN
	GET STACKED DIAGNOSTICS
		ex_sqlstate = RETURNED_SQLSTATE,
		ex_colname = COLUMN_NAME,
		ex_constraintname = CONSTRAINT_NAME,
		ex_datatype = PG_DATATYPE_NAME,
		ex_msgtext = MESSAGE_TEXT,
		ex_tablename = TABLE_NAME,
		ex_schemaname = SCHEMA_NAME,
		ex_details = PG_EXCEPTION_DETAIL,
		ex_hint = PG_EXCEPTION_HINT,
		ex_context = PG_EXCEPTION_CONTEXT;
	DROP TABLE IF EXISTS temp_EX;
	CREATE TEMP TABLE temp_EX as SELECT * from acc.viw_jor_Select where h_id = '0';
	INSERT INTO temp_EX(h_notes)VALUES('PostgreSQL'||','|| ex_id || ',' || ex_sqlstate || ',' || ex_msgtext || ',' || ex_context);
------------------------------------------------------------------------------------------------------INSERT INTO ex
INSERT INTO grl.tbl_ex(
id, sqlstate, colname, constraintname, datatype, msgtext, tablename, schemaname, details, hint, context, extime, company_id, branche_id, store_id, user_id, eventtype_id, doc_id)
VALUES(ex_id, ex_sqlstate, ex_colname, ex_constraintname, ex_datatype, ex_msgtext, ex_tablename, ex_schemaname, ex_details, ex_hint, ex_context, on_servertime, in_company_id, in_branch_id, null, in_user_id,31, in_id);
------------------------------------------------------------------------------------------------------Faild Return
return QUERY select * from temp_EX;
End

$BODY$;

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION acc.fnc_jor_delete(
	in_id character varying,
	in_company_id character varying,
	in_user_id character varying)
    RETURNS SETOF acc.viw_jor_select 
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
    ROWS 1000
AS $BODY$

declare 
	on_edit_id integer;
	on_jorD_id integer;
	on_servertime timestamp; 
	on_yyyy text;
	on_yy text;
	on_MM text;
	on_ref text;
	on_jorRefType text;
	on_sequ smallint;
	on_xsequ text;
	on_audit_id bigint;
--------------------------------------------
	ex_id integer;
	ex_sqlstate text;
	ex_colname text; 
	ex_constraintname text; 
	ex_datatype text; 
	ex_msgtext text; 
	ex_tablename text; 
	ex_schemaname text; 
	ex_details text; 
	ex_hint text; 
	ex_context text; 
BEGIN
	ex_id = (select(select max(id) from grl.tbl_ex) + 1); if ex_id is null then ex_id = 1; end if;
	on_edit_id = (select(select max(id) from acc.tbl_joredit) + 1); if on_edit_id is null then on_edit_id = 1; end if;
	on_audit_id = (select(select max(id) from grl.tbl_audit) + 1); if on_audit_id is null then on_audit_id = 1; end if;
	on_servertime = (select(current_timestamp));					 					 
------------------------------------------------------------------------------------------------------INSERT INTO joredit
INSERT INTO acc.tbl_joredit(
	id, jor_id, sequ, doctype_id, doc_id, currency_id, currencyprice, jortype_id, yyyy, mm, ref, 
	notes, company_id, fyear_id, branch_id, cc1_id, cc2_id, creationtime, createservertime, editingtime, editservertime, 
	createuser_id, edituser_id, edit, delete)
SELECT on_edit_id, id, sequ, doctype_id, doc_id, currency_id, currencyprice, jortype_id, yyyy, mm, ref, 
	notes, company_id, fyear_id, branch_id, cc1_id, cc2_id, creationtime, createservertime, on_servertime, on_servertime, 
	createuser_id, in_user_id, edit, 1
	FROM acc.tbl_jor j WHERE j.id = in_id AND j.company_id = in_company_id;
	
------------------------------------------------------------------------------------------------------INSERT INTO jordedit
INSERT INTO acc.tbl_jordedit(
	jord_id, jor_id, debit, credit, 
	chart_id, doctype_id, doc_id, currency_id, currencyprice, 
	jortype_id, yyyy, mm, ref,notes, 
	company_id, fyear_id, branch_id, cc1_id, cc2_id, 
	creationtime, createservertime, editingtime, editservertime,createuser_id, edituser_id, edit, delete)
	
SELECT id, jor_id, debit, credit, 
	chart_id, doctype_id, doc_id, currency_id, currencyprice, 
	jortype_id, yyyy, mm, ref, notes, 
	company_id, fyear_id, branch_id, cc1_id, cc2_id, 
	creationtime, createservertime, on_servertime, on_servertime, createuser_id, in_user_id, edit, 1
	FROM acc.tbl_jord jd WHERE jd.jor_id = in_id AND jd.company_id = in_company_id;
	
	
DELETE FROM acc.tbl_jord jd WHERE jd.jor_id = in_id AND jd.company_id = in_company_id;
DELETE FROM acc.tbl_jor j WHERE j.id = in_id AND j.company_id = in_company_id;
------------------------------------------------------------------------------------------------------INSERT INTO audit
INSERT INTO grl.tbl_audit(
	id, eventtime, eventtype_id, doctype_id, doc_id, user_id, company_id)
	VALUES (on_audit_id, on_servertime, 32, 10, in_id, in_user_id, in_company_id);
------------------------------------------------------------------------------------------------------Success Return
RETURN QUERY select * from acc.viw_jor_Select where h_id = in_id AND h_company_id = in_company_id AND company_id = in_company_id;
------------------------------------------------------------------------------------------------------EX
EXCEPTION WHEN OTHERS THEN
	GET STACKED DIAGNOSTICS
		ex_sqlstate = RETURNED_SQLSTATE,
		ex_colname = COLUMN_NAME,
		ex_constraintname = CONSTRAINT_NAME,
		ex_datatype = PG_DATATYPE_NAME,
		ex_msgtext = MESSAGE_TEXT,
		ex_tablename = TABLE_NAME,
		ex_schemaname = SCHEMA_NAME,
		ex_details = PG_EXCEPTION_DETAIL,
		ex_hint = PG_EXCEPTION_HINT,
		ex_context = PG_EXCEPTION_CONTEXT;
	DROP TABLE IF EXISTS temp_EX;
	CREATE TEMP TABLE temp_EX as SELECT * from acc.viw_jor_Select where h_id = '0';
	INSERT INTO temp_EX(h_notes)VALUES('PostgreSQL'||','|| ex_id || ',' || ex_sqlstate || ',' || ex_msgtext || ',' || ex_context);
------------------------------------------------------------------------------------------------------INSERT INTO ex
INSERT INTO grl.tbl_ex(
id, sqlstate, colname, constraintname, datatype, msgtext, tablename, schemaname, details, hint, context, extime, company_id, branche_id, store_id, user_id, eventtype_id, doc_id)
VALUES(ex_id, ex_sqlstate, ex_colname, ex_constraintname, ex_datatype, ex_msgtext, ex_tablename, ex_schemaname, ex_details, ex_hint, ex_context, on_servertime, in_company_id, null, null, in_user_id,32, in_id);
------------------------------------------------------------------------------------------------------Faild Return
return QUERY select * from temp_EX;
End

$BODY$;

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION acc.fnc_jor_select(
	in_id character varying,
	in_sequ integer,
	in_branch_id character varying,
	in_company_id character varying,
	in_selecttype text)
    RETURNS SETOF acc.viw_jor_select 
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
    ROWS 1000
AS $BODY$

declare 

BEGIN
------------------------------------------------------------------------------------------------------Select
IF in_selecttype = 'Select' THEN 

RETURN QUERY SELECT * FROM acc.viw_jor_Select WHERE h_id = in_id AND h_company_id = in_company_id;

END IF;
------------------------------------------------------------------------------------------------------Search
IF in_selecttype = 'Search' THEN 

RETURN QUERY SELECT * FROM acc.viw_jor_Select WHERE h_sequ = in_sequ AND h_branch_id = in_branch_id AND h_company_id = in_company_id;

END IF;
------------------------------------------------------------------------------------------------------First
IF in_selecttype = 'First' THEN 

in_id = (SELECT h_id FROM acc.viw_jor_Select WHERE h_branch_id = in_branch_id AND h_company_id = in_company_id ORDER BY h_sequ ASC LIMIT 1);
RETURN QUERY SELECT * FROM acc.viw_jor_Select WHERE h_id = in_id AND h_company_id = in_company_id;

END IF;
------------------------------------------------------------------------------------------------------Prev
IF in_selecttype = 'Prev' THEN 

in_sequ = (SELECT h_sequ FROM acc.viw_jor_Select WHERE h_id = in_id AND h_company_id = in_company_id LIMIT 1);
in_id = (SELECT h_id FROM acc.viw_jor_Select WHERE h_sequ < in_sequ AND h_branch_id = in_branch_id AND h_company_id = in_company_id ORDER BY h_sequ Desc LIMIT 1);
RETURN QUERY SELECT * FROM acc.viw_jor_Select WHERE h_id = in_id AND h_company_id = in_company_id;

END IF;
------------------------------------------------------------------------------------------------------Next
IF in_selecttype = 'Next' THEN 

in_sequ = (SELECT h_sequ FROM acc.viw_jor_Select WHERE h_id = in_id AND h_company_id = in_company_id LIMIT 1);
in_id = (SELECT h_id FROM acc.viw_jor_Select WHERE h_sequ > in_sequ AND h_branch_id = in_branch_id AND h_company_id = in_company_id ORDER BY h_sequ ASC LIMIT 1);
RETURN QUERY SELECT * FROM acc.viw_jor_Select WHERE h_id = in_id AND h_company_id = in_company_id;

END IF;
------------------------------------------------------------------------------------------------------Last
IF in_selecttype = 'Last' THEN 

in_id = (SELECT h_id FROM acc.viw_jor_Select WHERE h_branch_id = in_branch_id AND h_company_id = in_company_id ORDER BY h_sequ Desc LIMIT 1);
RETURN QUERY SELECT * FROM acc.viw_jor_Select WHERE h_id = in_id AND h_company_id = in_company_id;

END IF;

End

$BODY$;

----------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------	
CREATE OR REPLACE FUNCTION acc.fnc_jor_close(
	in_company_id text,
	in_branches_ids json,
	in_oldfyear_id text,
	in_newfyear_id text,
	in_cc boolean,
	in_user_id text,
	in_date timestamp without time zone,
	in_notes text)
    RETURNS SETOF acc.viw_jor_select 
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
    ROWS 1000
AS $BODY$

declare 
	on_servertime timestamp; 
	on_int_seq smallint;
	on_string_seq text;
	on_audit_id bigint;
-------------------------------------------
	on_yyyy text;
	on_yy text;
	on_MM text;
	on_ref text;
	on_date timestamp;
	on_branch_id text;
	on_jor_id text;
	on_jortype_id text;
	on_jorD_id integer;
-------------------------------------------
	i jsonb;
	on_eventtype_id smallint;
	on_doctype_id smallint;
	rec RECORD;
--------------------------------------------
	on_jorD_chart_id text;								   
	on_jorD_debit  numeric;
    on_jorD_credit  numeric;										       		
    on_jorD_currency_id text;
	on_jorD_currencyprice numeric;	
	on_jorD_cc1_id text;
	on_jorD_cc2_id text;
	
	on_balance numeric;
	on_balance_chart_id text;
--------------------------------------------
	ex_id integer;
	ex_sqlstate text;
	ex_colname text; 
	ex_constraintname text; 
	ex_datatype text; 
	ex_msgtext text; 
	ex_tablename text; 
	ex_schemaname text; 
	ex_details text; 
	ex_hint text; 
	ex_context text; 
BEGIN
	ex_id = (select(select max(id) from grl.tbl_ex) + 1); if ex_id is null then ex_id = 1; end if;
	on_audit_id = (select(select max(id) from grl.tbl_audit) + 1); if on_audit_id is null then on_audit_id = 1; end if;	
	on_servertime = (select(current_timestamp));
	on_jorD_id = (select(select max(id) from acc.tbl_jorD) + 1); if on_jorD_id is null then on_jorD_id = 1; end if;	
	
	on_jortype_id = '2';				
	on_eventtype_id = 70;
	on_doctype_id = 10;
																			
	--CREATE TABLE IF NOT EXISTS acc.tbl_arch_jor( like acc.tbl_jor including all);
							
FOR i IN SELECT * FROM json_array_elements(in_branches_ids)
  LOOP
			
	on_branch_id := i->>'id';
	on_yyyy = (select extract(year from   in_date));
	on_MM = (select extract(month from   in_date));
	on_MM = (select case when (length(on_MM) = 1) then (select concat('0',on_MM)) else on_MM end);
	on_ref = '000';

	on_int_seq = 1;
	on_string_seq = '00001';											
	
	on_date = (select beigndate from grl.tbl_fyears where id = in_newfyear_id);												
	on_yy = (select substring((select extract(year from (select beigndate from grl.tbl_fyears where id = in_newfyear_id))::text) from 3 for 2));	
	on_jor_id = (on_branch_id || on_yy || on_string_seq);	
											  
							  
	WHILE exists(select 1 from acc.tbl_cin where postedjor_id = on_branch_id)
	loop
		on_int_seq = on_int_seq + 1;
		on_string_seq = on_sequ::text;
		on_string_seq = repeat('0', 5 - length(on_string_seq)) || on_string_seq;
		on_jor_id = (on_branch_id || on_yy || on_string_seq);
	end loop;	
							  
	WHILE exists(select 1 from acc.tbl_cout where postedjor_id = on_jor_id)
	loop
		on_int_seq = on_int_seq + 1;
		on_string_seq = on_sequ::text;
		on_string_seq = repeat('0', 5 - length(on_string_seq)) || on_string_seq;
		on_jor_id = (on_branch_id || on_yy || on_string_seq);
	end loop;						
							
							
  	INSERT INTO acc.tbl_jor(id, sequ, jortype_id, currency_id, yyyy, MM, ref, notes, company_id, fyear_id, 
	branch_id, creationtime, createservertime, createuser_id, frozen)
	VALUES (
		on_jor_id, 
		on_int_seq, 
		on_jortype_id,
		'01',
		on_yyyy,
		on_MM,
		on_ref,
		in_notes,
		in_company_id, 
		in_newfyear_id, 
		on_branch_id, 
		on_date, 
		on_servertime, 
		in_user_id,
	    'true');	
------------------------------------------------------------------------------------------------------INSERT INTO acc.tbl_jord	
	 DROP TABLE IF EXISTS temp_close;
	 IF (in_cc = 'true') THEN											   
	 	CREATE TEMP TABLE temp_close as SELECT * from acc.fnc_jor_close_jord_cc(in_company_id, on_branch_id, in_oldfyear_id) order by ret_chart_id;
	 ELSE	
		CREATE TEMP TABLE temp_close as SELECT * from acc.fnc_jor_close_jord(in_company_id, on_branch_id, in_oldfyear_id) order by ret_chart_id;									   
	 END IF;									   
											   
	 FOR rec IN SELECT * FROM temp_close
        LOOP
			on_jorD_chart_id = rec.ret_chart_id;								   
			on_jorD_debit = rec.ret_debit;
    		on_jorD_credit = rec.ret_credit;										       		
    		on_jorD_currency_id = rec.ret_currency_id;
			on_jorD_currencyprice = rec.ret_currencyprice;									   
			IF (in_cc = 'true') THEN on_jorD_cc1_id = rec.ret_cc1_id; ELSE  on_jorD_cc1_id = NULL; END IF;
			IF (in_cc = 'true') THEN on_jorD_cc2_id = rec.ret_cc2_id; ELSE  on_jorD_cc1_id = NULL; END IF;							   
											   
			IF (on_jorD_debit > on_jorD_credit) THEN		   		 
				on_jorD_debit = on_jorD_debit - on_jorD_credit;
				on_jorD_credit = 0;	
		   ELSIF(on_jorD_debit < on_jorD_credit) THEN
				on_jorD_credit = on_jorD_credit - on_jorD_debit;
				on_jorD_debit = 0;	
		   ELSIF(on_jorD_debit = on_jorD_credit) THEN	
				on_jorD_debit = 0;
				on_jorD_credit = 0;	
		   END IF;								   
			
			IF 	(on_jorD_debit <> on_jorD_credit) THEN		
			
			INSERT INTO acc.tbl_jord
    		(id, jor_id, debit, credit, chart_id, doctype_id, doc_id, currency_id, 
			 currencyprice, cc1_id, cc2_id, jortype_id, yyyy, mm, ref, 
			 company_id, fyear_id, branch_id, 
			 creationtime, createservertime, createuser_id, frozen)	
			VALUES
			(on_jord_id, on_jor_id, on_jorD_debit, on_jorD_credit, on_jorD_chart_id, on_doctype_id, on_jor_id, on_jorD_currency_id,
			 on_jorD_currencyprice, on_jorD_cc1_id, on_jorD_cc2_id, on_jortype_id, on_yyyy, on_mm, on_ref, 
			 in_company_id, in_newfyear_id, on_branch_id, 
		     on_date, on_servertime, in_user_id, 'true'
			);
   		
			on_jorD_id = on_jorD_id + 1;	
			END IF;									   
 		END LOOP;			
		
	 on_balance = (select sum(ret_debit) - sum(ret_credit) from temp_close);
											   
	 IF on_balance > 1 THEN 
	 	on_balance_chart_id = (SELECT id FROM acc.tbl_chart WHERE stop = 'false' AND company_id = in_company_id AND parent = 'false' AND property_id = '4' limit 1);
			INSERT INTO acc.tbl_jord
    		(id, jor_id, debit, credit, chart_id, doctype_id, doc_id, currency_id, 
			 currencyprice, cc1_id, cc2_id, jortype_id, yyyy, mm, ref, 
			 company_id, fyear_id, branch_id, 
			 creationtime, createservertime, createuser_id, frozen)	
			VALUES
			(on_jord_id, on_jor_id, 0, on_balance, on_balance_chart_id, on_doctype_id, on_jor_id, on_jorD_currency_id,
			 on_jorD_currencyprice, on_jorD_cc1_id, on_jorD_cc2_id, on_jortype_id, on_yyyy, on_mm, on_ref, 
			 in_company_id, in_newfyear_id, on_branch_id, 
		     on_date, on_servertime, in_user_id, 'true'
			);
			on_jorD_id = on_jorD_id + 1;
											   
	 ELSEIF on_balance < 1 THEN 
	 	on_balance_chart_id = (SELECT id FROM acc.tbl_chart WHERE stop = 'false' AND company_id = in_company_id AND parent = 'false' AND property_id = '5' limit 1);	
		on_balance = on_balance * -1;								   
			INSERT INTO acc.tbl_jord
    		(id, jor_id, debit, credit, chart_id, doctype_id, doc_id, currency_id, 
			 currencyprice, cc1_id, cc2_id, jortype_id, yyyy, mm, ref, 
			 company_id, fyear_id, branch_id, 
			 creationtime, createservertime, createuser_id, frozen)	
			VALUES
			(on_jord_id, on_jor_id, on_balance, 0, on_balance_chart_id, on_doctype_id, on_jor_id, on_jorD_currency_id,
			 on_jorD_currencyprice, on_jorD_cc1_id, on_jorD_cc2_id, on_jortype_id, on_yyyy, on_mm, on_ref, 
			 in_company_id, in_newfyear_id, on_branch_id, 
		     on_date, on_servertime, in_user_id, 'true'
			);									   
		on_jorD_id = on_jorD_id + 1;							   
	 END IF;										   
											   
END LOOP;										   
------------------------------------------------------------------------------------------------------INSERT INTO audit
INSERT INTO grl.tbl_audit(
	id, eventtime, eventtype_id, doctype_id, doc_id, user_id, company_id)
	VALUES (on_audit_id, on_servertime, on_eventtype_id, on_doctype_id, on_jor_id, in_user_id, in_company_id);
------------------------------------------------------------------------------------------------------Success Return
RETURN QUERY select * from acc.viw_jor_Select where h_id = on_jor_id;
------------------------------------------------------------------------------------------------------EX
EXCEPTION WHEN OTHERS THEN
	GET STACKED DIAGNOSTICS
		ex_sqlstate = RETURNED_SQLSTATE,
		ex_colname = COLUMN_NAME,
		ex_constraintname = CONSTRAINT_NAME,
		ex_datatype = PG_DATATYPE_NAME,
		ex_msgtext = MESSAGE_TEXT,
		ex_tablename = TABLE_NAME,
		ex_schemaname = SCHEMA_NAME,
		ex_details = PG_EXCEPTION_DETAIL,
		ex_hint = PG_EXCEPTION_HINT,
		ex_context = PG_EXCEPTION_CONTEXT;
	DROP TABLE IF EXISTS temp_EX;
	CREATE TEMP TABLE temp_EX as SELECT * from acc.viw_jor_Select where h_id = '0';
	INSERT INTO temp_EX(h_notes)VALUES('PostgreSQL'||','|| ex_id || ',' || ex_sqlstate || ',' || ex_msgtext || ',' || ex_context);
------------------------------------------------------------------------------------------------------INSERT INTO ex
INSERT INTO grl.tbl_ex(
id, sqlstate, colname, constraintname, datatype, msgtext, tablename, schemaname, details, hint, context, extime, company_id, branche_id, store_id, user_id, eventtype_id, doc_id)
VALUES(ex_id, ex_sqlstate, ex_colname, ex_constraintname, ex_datatype, ex_msgtext, ex_tablename, ex_schemaname, ex_details, ex_hint, ex_context, on_servertime, in_company_id, on_branch_id, null, in_user_id, on_eventtype_id, on_jor_id);
------------------------------------------------------------------------------------------------------Faild Return
return QUERY select * from temp_EX;
End

$BODY$;

