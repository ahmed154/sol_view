DROP FUNCTION IF EXISTS acc.fnc_cin_post(character varying, timestamp without time zone, character varying, character varying);
DROP FUNCTION IF EXISTS acc.fnc_cout_post(character varying, timestamp without time zone, character varying, character varying);
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION acc.fnc_cin_post(
	in_cin_id character varying,
	in_posttime timestamp without time zone,
	in_user_id character varying,
	in_company_id character varying)
    RETURNS SETOF acc.viw_cin_select 
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
    ROWS 1000
AS $BODY$

declare 
	on_jor_id character varying;
	on_jorD_id integer;
	
	on_doctype_id smallint;
	on_currency_id smallint;
	on_currencyprice numeric; 
	on_jortype_id smallint;
	
	on_notes text; 
	on_fyear_id text; 
	on_branch_id text; 
	on_cc1_id text;  
	on_cc2_id text;  
	on_creationtime timestamp;  
-------------------------------------------------------------
rec   record;
-------------------------------------------------------------
	on_servertime timestamp; 
	on_yyyy text;
	on_yy text;
	on_MM text;
	on_ref text;
	on_jorRefType text;
	on_sequ smallint;
	on_xsequ text;
	on_audit_id bigint;
-------------------------------------------
	i jsonb;
	on_jorD_debit numeric;
	on_jorD_credit numeric;
	on_jorD_chart_id text;
	on_jorD_notes text;
	on_jorD_cc1_id text;
	on_jorD_cc2_id text;
	on_jorD_branch_id text;
--------------------------------------------
	ex_id integer;
	ex_sqlstate text;
	ex_colname text; 
	ex_constraintname text; 
	ex_datatype text; 
	ex_msgtext text; 
	ex_tablename text; 
	ex_schemaname text; 
	ex_details text; 
	ex_hint text; 
	ex_context text; 
BEGIN
	ex_id = (select(select max(id) from grl.tbl_ex) + 1); if ex_id is null then ex_id = 1; end if;
	
	DROP TABLE IF EXISTS temp_cin;
	CREATE TEMP TABLE temp_cin AS SELECT * FROM acc.viw_cin_select WHERE h_id = in_cin_id AND h_company_id = in_company_id;
	
	on_doctype_id = 19;
	on_creationtime = (select h_creationtime from temp_cin limit 1);
	on_branch_id = (select h_branch_id from temp_cin limit 1);
	on_currency_id = (select id from grl.tbl_currencies order by sequ asc limit 1);
	on_currencyprice = (select price from grl.tbl_currencies order by sequ asc limit 1); 
	on_jortype_id = 9;
	on_notes = (select h_notes from temp_cin limit 1); 
	on_fyear_id = (select h_fyear_id from temp_cin limit 1); 
	on_cc1_id = (select h_cc1_id from temp_cin limit 1);  
	on_cc2_id = (select h_cc2_id from temp_cin limit 1);  

	on_audit_id = (select(select max(id) from grl.tbl_audit) + 1); if on_audit_id is null then on_audit_id = 1; end if;
	on_jorD_id = (select(select max(id) from acc.tbl_jorD WHERE company_id = in_company_id) + 1); if on_jorD_id is null then on_jorD_id = 1; end if;
	on_servertime = (select(current_timestamp));
	
	on_yyyy = (select extract(year from   on_creationtime));
	on_MM = (select extract(month from   on_creationtime));
	on_MM = (select case when (length(on_MM) = 1) then (select concat('0',on_MM)) else on_MM end);
	on_ref = 'pin';
					 
	on_sequ = (select(select max(sequ) from acc.tbl_jor
					  WHERE company_id = in_company_id	
					  AND branch_id = on_branch_id
					  AND fyear_id = on_fyear_id
					 ) + 1);
					 					 
	on_sequ = (select case when (on_sequ is NULL) then 1 else on_sequ end);
	on_xsequ = on_sequ::text;
	
	WHILE (length(on_xsequ) < 5)
		loop
			on_xsequ = (select concat('0',on_xsequ));
		end loop;
		
	--on_yy = (select substring(on_yyyy from 3 for 2));
	on_yy = (select substring((select extract(year from (select beigndate from grl.tbl_fyears where id = on_fyear_id))::text) from 3 for 2));	
								  
	--in_id = (on_branch_id || on_yy || on_MM || on_ref || on_xsequ);
	
	on_jor_id = (select postedjor_id from acc.tbl_cin where id = in_cin_id);

	if(on_jor_id is not null)
	THEN
		on_sequ = CAST (substr(on_jor_id, 6) AS int);
	ELSE
			on_jor_id = (on_branch_id || on_yy || on_xsequ);
			
			WHILE exists(select 1 from acc.tbl_cin cin, acc.tbl_cout cout where cin.postedjor_id = on_jor_id OR cout.postedjor_id = on_jor_id)
			loop
				on_sequ = on_sequ + 1;
				on_xsequ = on_sequ::text;
				on_xsequ = repeat('0', 5 - length(on_xsequ)) || on_xsequ;
				on_jor_id = (on_branch_id || on_yy || on_xsequ);
			end loop;								  
	END IF;
------------------------------------------------------------------------------------------------------INSERT INTO jor 
INSERT INTO acc.tbl_jor(
	id, 
	sequ,
	doctype_id,
	doc_id,
	currency_id, 
	currencyprice, 
	jortype_id, 
	yyyy,
	MM,
	ref,
	notes, 
	company_id, 
	fyear_id, 
	branch_id, 
	cc1_id, 
	cc2_id, 
	creationtime, 
	createservertime, 
	createuser_id)
	VALUES (
		on_jor_id, 
		on_sequ, 
		on_doctype_id,
		in_cin_id,
		on_currency_id, 
		on_currencyprice, 
		on_jortype_id,
		on_yyyy,
		on_MM,
		on_ref,
		on_notes,
		in_company_id, 
		on_fyear_id, 
		on_branch_id, 
		on_cc1_id, 
		on_cc2_id, 
		on_creationtime, 
		on_servertime, 
		in_user_id);
------------------------------------------------------------------------------------------------------INSERT INTO jorD 		
FOR rec IN SELECT * FROM acc.viw_cin_select WHERE h_id = in_cin_id AND h_company_id = in_company_id
    LOOP
        INSERT INTO acc.tbl_jord(id, jor_id, debit, credit, chart_id, doctype_id, doc_id, currency_id, currencyprice, jortype_id, yyyy, MM, ref, notes, 
								 company_id, fyear_id, branch_id, cc1_id, cc2_id, creationtime, createservertime, createuser_id )
		VALUES (
			on_jorD_id, on_jor_id, rec.d_amount, 0, rec.d_chart_cin_id, on_doctype_id, in_cin_id, rec.d_currency_id, rec.d_currency_price, on_jortype_id, on_yyyy, on_MM, on_ref,
			rec.d_notes, in_company_id, on_fyear_id, on_branch_id, on_cc1_id, on_cc2_id, on_creationtime, on_servertime, in_user_id);		
			on_jorD_id = on_jorD_id + 1;
							  
		INSERT INTO acc.tbl_jord(id, jor_id, debit, credit, chart_id, doctype_id, doc_id, currency_id, currencyprice, jortype_id, yyyy, MM, ref, notes, 
								 company_id, fyear_id, branch_id, cc1_id, cc2_id, creationtime, createservertime, createuser_id )
		VALUES (
			on_jorD_id, on_jor_id, 0, rec.d_amount, rec.d_chart_cout_id, on_doctype_id, in_cin_id, rec.d_currency_id, rec.d_currency_price, on_jortype_id, on_yyyy, on_MM, on_ref,
			rec.d_notes, in_company_id, on_fyear_id, on_branch_id, on_cc1_id, on_cc2_id, on_creationtime, on_servertime, in_user_id);		
			on_jorD_id = on_jorD_id + 1;
    END LOOP;	 
------------------------------------------------------------------------------------------------------UPDATE acc.tbl_cin & cind
	UPDATE acc.tbl_cin SET posted = '1', jor_id = on_jor_id, postedjor_id = on_jor_id  WHERE id = in_cin_id AND company_id = in_company_id;
	UPDATE acc.tbl_cind SET posted = '1', jor_id = on_jor_id WHERE cin_id = in_cin_id AND company_id = in_company_id;
------------------------------------------------------------------------------------------------------INSERT INTO audit
INSERT INTO grl.tbl_audit(
	id, eventtime, eventtype_id, doctype_id, doc_id, user_id, company_id)
	VALUES (on_audit_id, on_servertime, 63, on_doctype_id, in_cin_id, in_user_id, in_company_id);
------------------------------------------------------------------------------------------------------Success Return
RETURN QUERY select * from acc.viw_cin_Select where h_id = in_cin_id;
------------------------------------------------------------------------------------------------------EX
EXCEPTION WHEN OTHERS THEN
	GET STACKED DIAGNOSTICS
		ex_sqlstate = RETURNED_SQLSTATE,
		ex_colname = COLUMN_NAME,
		ex_constraintname = CONSTRAINT_NAME,
		ex_datatype = PG_DATATYPE_NAME,
		ex_msgtext = MESSAGE_TEXT,
		ex_tablename = TABLE_NAME,
		ex_schemaname = SCHEMA_NAME,
		ex_details = PG_EXCEPTION_DETAIL,
		ex_hint = PG_EXCEPTION_HINT,
		ex_context = PG_EXCEPTION_CONTEXT;
	DROP TABLE IF EXISTS temp_EX;
	CREATE TEMP TABLE temp_EX as SELECT * from acc.viw_cin_Select where h_id = '0';
	INSERT INTO temp_EX(h_notes)VALUES('PostgreSQL'||','|| ex_id || ',' || ex_sqlstate || ',' || ex_msgtext || ',' || ex_context);
------------------------------------------------------------------------------------------------------INSERT INTO ex
INSERT INTO grl.tbl_ex(
id, sqlstate, colname, constraintname, datatype, msgtext, tablename, schemaname, details, hint, context, extime, company_id, branche_id, store_id, user_id, eventtype_id, doctype_id, doc_id)
VALUES(ex_id, ex_sqlstate, ex_colname, ex_constraintname, ex_datatype, ex_msgtext, ex_tablename, ex_schemaname, ex_details, ex_hint, ex_context, on_servertime, in_company_id, on_branch_id, null, in_user_id,63, on_doctype_id, in_cin_id);
------------------------------------------------------------------------------------------------------Faild Return
return QUERY select * from temp_EX;
End

$BODY$;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
CREATE OR REPLACE FUNCTION acc.fnc_cout_post(
	in_cout_id character varying,
	in_posttime timestamp without time zone,
	in_user_id character varying,
	in_company_id character varying)
    RETURNS SETOF acc.viw_cout_select 
    LANGUAGE 'plpgsql'

    COST 100
    VOLATILE 
    ROWS 1000
AS $BODY$

declare 
	on_jor_id character varying;
	on_jorD_id integer;
	
	on_doctype_id smallint;
	on_currency_id smallint;
	on_currencyprice numeric; 
	on_jortype_id smallint;
	
	on_notes text; 
	on_fyear_id text; 
	on_branch_id text; 
	on_cc1_id text;  
	on_cc2_id text;  
	on_creationtime timestamp;  
-------------------------------------------------------------
rec   record;
-------------------------------------------------------------
	on_servertime timestamp; 
	on_yyyy text;
	on_yy text;
	on_MM text;
	on_ref text;
	on_jorRefType text;
	on_sequ smallint;
	on_xsequ text;
	on_audit_id bigint;
-------------------------------------------
	i jsonb;
	on_jorD_debit numeric;
	on_jorD_credit numeric;
	on_jorD_chart_id text;
	on_jorD_notes text;
	on_jorD_cc1_id text;
	on_jorD_cc2_id text;
	on_jorD_branch_id text;
--------------------------------------------
	ex_id integer;
	ex_sqlstate text;
	ex_colname text; 
	ex_constraintname text; 
	ex_datatype text; 
	ex_msgtext text; 
	ex_tablename text; 
	ex_schemaname text; 
	ex_details text; 
	ex_hint text; 
	ex_context text; 
BEGIN
	ex_id = (select(select max(id) from grl.tbl_ex) + 1); if ex_id is null then ex_id = 1; end if;
	
	DROP TABLE IF EXISTS temp_cout;
	CREATE TEMP TABLE temp_cout AS SELECT * FROM acc.viw_cout_select WHERE h_id = in_cout_id AND h_company_id = in_company_id;
	
	on_doctype_id = 20;
	on_creationtime = (select h_creationtime from temp_cout limit 1);
	on_branch_id = (select h_branch_id from temp_cout limit 1);
	on_currency_id = (select id from grl.tbl_currencies order by sequ asc limit 1);
	on_currencyprice = (select price from grl.tbl_currencies order by sequ asc limit 1); 
	on_jortype_id = 10;
	on_notes = (select h_notes from temp_cout limit 1); 
	on_fyear_id = (select h_fyear_id from temp_cout limit 1); 
	on_cc1_id = (select h_cc1_id from temp_cout limit 1);  
	on_cc2_id = (select h_cc2_id from temp_cout limit 1);  

	on_audit_id = (select(select max(id) from grl.tbl_audit) + 1); if on_audit_id is null then on_audit_id = 1; end if;
	on_jorD_id = (select(select max(id) from acc.tbl_jorD WHERE company_id = in_company_id) + 1); if on_jorD_id is null then on_jorD_id = 1; end if;
	on_servertime = (select(current_timestamp));
	
	on_yyyy = (select extract(year from   on_creationtime));
	on_MM = (select extract(month from   on_creationtime));
	on_MM = (select case when (length(on_MM) = 1) then (select concat('0',on_MM)) else on_MM end);
	on_ref = 'put';
					 
	on_sequ = (select(select max(sequ) from acc.tbl_jor
					  WHERE company_id = in_company_id	
					  AND branch_id = on_branch_id
					  AND fyear_id = on_fyear_id
					 ) + 1);
					 					 
	on_sequ = (select case when (on_sequ is NULL) then 1 else on_sequ end);
	on_xsequ = on_sequ::text;
	
	WHILE (length(on_xsequ) < 5)
		loop
			on_xsequ = (select concat('0',on_xsequ));
		end loop;
		
	--on_yy = (select substring(on_yyyy from 3 for 2));
	on_yy = (select substring((select extract(year from (select beigndate from grl.tbl_fyears where id = on_fyear_id))::text) from 3 for 2));	

	--in_id = (on_branch_id || on_yy || on_MM || on_ref || on_xsequ);
	
	on_jor_id = (select postedjor_id from acc.tbl_cout where id = in_cout_id);

	if(on_jor_id is not null)
	THEN
		on_sequ = CAST (substr(on_jor_id, 6) AS int);
	ELSE
			on_jor_id = (on_branch_id || on_yy || on_xsequ);
							  
			WHILE exists(select 1 from acc.tbl_cin cin, acc.tbl_cout cout where cin.postedjor_id = on_jor_id OR cout.postedjor_id = on_jor_id)
			loop
				on_sequ = on_sequ + 1;
				on_xsequ = on_sequ::text;
				on_xsequ = repeat('0', 5 - length(on_xsequ)) || on_xsequ;
				on_jor_id = (on_branch_id || on_yy || on_xsequ);
			end loop;	
							  
			--WHILE exists(select * from acc.tbl_cout where postedjor_id = on_jor_id)
			--loop
				--on_sequ = on_sequ + 1;
				--on_xsequ = on_sequ::text;
				--on_xsequ = repeat('0', 5 - length(on_xsequ)) || on_xsequ;								  
				--on_jor_id = (on_branch_id || on_yy || on_xsequ);
			--end loop;	
	END IF;
------------------------------------------------------------------------------------------------------INSERT INTO jor 
INSERT INTO acc.tbl_jor(
	id, 
	sequ,
	doctype_id,
	doc_id,
	currency_id, 
	currencyprice, 
	jortype_id, 
	yyyy,
	MM,
	ref,
	notes, 
	company_id, 
	fyear_id, 
	branch_id, 
	cc1_id, 
	cc2_id, 
	creationtime, 
	createservertime, 
	createuser_id)
	VALUES (
		on_jor_id, 
		on_sequ, 
		on_doctype_id,
		in_cout_id,
		on_currency_id, 
		on_currencyprice, 
		on_jortype_id,
		on_yyyy,
		on_MM,
		on_ref,
		on_notes,
		in_company_id, 
		on_fyear_id, 
		on_branch_id, 
		on_cc1_id, 
		on_cc2_id, 
		on_creationtime, 
		on_servertime, 
		in_user_id);
------------------------------------------------------------------------------------------------------INSERT INTO jorD 		
FOR rec IN SELECT * FROM acc.viw_cout_select WHERE h_id = in_cout_id AND h_company_id = in_company_id
    LOOP
        INSERT INTO acc.tbl_jord(id, jor_id, debit, credit, chart_id, doctype_id, doc_id, currency_id, currencyprice, jortype_id, yyyy, MM, ref, notes, 
								 company_id, fyear_id, branch_id, cc1_id, cc2_id, creationtime, createservertime, createuser_id )
		VALUES (
			on_jorD_id, on_jor_id, rec.d_amount, 0, rec.d_chart_cin_id, on_doctype_id, in_cout_id, rec.d_currency_id, rec.d_currency_price, on_jortype_id, on_yyyy, on_MM, on_ref,
			rec.d_notes, in_company_id, on_fyear_id, on_branch_id, on_cc1_id, on_cc2_id, on_creationtime, on_servertime, in_user_id);		
			on_jorD_id = on_jorD_id + 1;
							  
		INSERT INTO acc.tbl_jord(id, jor_id, debit, credit, chart_id, doctype_id, doc_id, currency_id, currencyprice, jortype_id, yyyy, MM, ref, notes, 
								 company_id, fyear_id, branch_id, cc1_id, cc2_id, creationtime, createservertime, createuser_id )
		VALUES (
			on_jorD_id, on_jor_id, 0, rec.d_amount, rec.d_chart_cout_id, on_doctype_id, in_cout_id, rec.d_currency_id, rec.d_currency_price, on_jortype_id, on_yyyy, on_MM, on_ref,
			rec.d_notes, in_company_id, on_fyear_id, on_branch_id, on_cc1_id, on_cc2_id, on_creationtime, on_servertime, in_user_id);		
			on_jorD_id = on_jorD_id + 1;
    END LOOP;	 
------------------------------------------------------------------------------------------------------UPDATE acc.tbl_cout & coutd
	UPDATE acc.tbl_cout SET posted = '1', jor_id = on_jor_id, postedjor_id = on_jor_id  WHERE id = in_cout_id AND company_id = in_company_id;
	UPDATE acc.tbl_coutd SET posted = '1', jor_id = on_jor_id WHERE cout_id = in_cout_id AND company_id = in_company_id;
------------------------------------------------------------------------------------------------------INSERT INTO audit
INSERT INTO grl.tbl_audit(
	id, eventtime, eventtype_id, doctype_id, doc_id, user_id, company_id)
	VALUES (on_audit_id, on_servertime, 68, on_doctype_id, in_cout_id, in_user_id, in_company_id);
------------------------------------------------------------------------------------------------------Success Return
RETURN QUERY select * from acc.viw_cout_Select where h_id = in_cout_id;
------------------------------------------------------------------------------------------------------EX
EXCEPTION WHEN OTHERS THEN
	GET STACKED DIAGNOSTICS
		ex_sqlstate = RETURNED_SQLSTATE,
		ex_colname = COLUMN_NAME,
		ex_constraintname = CONSTRAINT_NAME,
		ex_datatype = PG_DATATYPE_NAME,
		ex_msgtext = MESSAGE_TEXT,
		ex_tablename = TABLE_NAME,
		ex_schemaname = SCHEMA_NAME,
		ex_details = PG_EXCEPTION_DETAIL,
		ex_hint = PG_EXCEPTION_HINT,
		ex_context = PG_EXCEPTION_CONTEXT;
	DROP TABLE IF EXISTS temp_EX;
	CREATE TEMP TABLE temp_EX as SELECT * from acc.viw_cout_Select where h_id = '0';
	INSERT INTO temp_EX(h_notes)VALUES('PostgreSQL'||','|| ex_id || ',' || ex_sqlstate || ',' || ex_msgtext || ',' || ex_context);
------------------------------------------------------------------------------------------------------INSERT INTO ex
INSERT INTO grl.tbl_ex(
id, sqlstate, colname, constraintname, datatype, msgtext, tablename, schemaname, details, hint, context, extime, company_id, branche_id, store_id, user_id, eventtype_id, doctype_id, doc_id)
VALUES(ex_id, ex_sqlstate, ex_colname, ex_constraintname, ex_datatype, ex_msgtext, ex_tablename, ex_schemaname, ex_details, ex_hint, ex_context, on_servertime, in_company_id, on_branch_id, null, in_user_id,68, on_doctype_id, in_cout_id);
------------------------------------------------------------------------------------------------------Faild Return
return QUERY select * from temp_EX;
End

$BODY$;